metadata:
  title: |
    MassAccess
  short title: |
    MassAccess
  title url: https://massaccess.suffolklitlab.org/
  logo: |
    <img src="/packagestatic/docassemble.MAVirtualCourt/mass_icon.png" class="ma_icon" alt="MA State Icon"><div class="title">MassAccess</div>
---
default screen parts:
  continue button label: |
    Next
  pre: |
    % if 'dev' in get_config('url root') or 'test' in get_config('url root'):
    <div id="qId"></div>
    % endif
---
features:
  javascript: show_id.js
---
# This is a backfill to ensure these keys in our metadata dictionary are
# defined and can be accessed by other helper code
generic object: DADict
code: |
  x['fields'] = DAEmpty()
---
generic object: DADict
code: |
  x['field_list'] = DAEmpty()
---
generic object: DADict
code: |
  x['built_in_fields_used'] = DAEmpty()
---
default screen parts:
  under: |
    % if not user_logged_in():
    [:sign-in-alt: Sign-in](${url_of('login', next=interview_url())}) or [register](${url_of('register', next=interview_url())}) to save your progress (optional).
    % endif

    % if 'dev' in get_config('url root') or 'test' in get_config('url root'):
    Feedback, suggestions, or comments? [Complete this survey](https://docs.google.com/forms/d/e/1FAIpQLSeHwCqKxXLJVcmPyUOZceuj2iUTmvOLWIEbAkWxfJVfDHvytA/viewform?usp=sf_link).
    % else:
    Feedback, suggestions, or comments? [Complete this survey](https://docs.google.com/forms/d/e/1FAIpQLSen48P7xIH6Feuzi9ovLs9HsOmhbo787vK-jScspAyZyjMqdg/viewform?usp=sf_link).
    % endif    
---
objects from file:
  - court_emails : court_emails.yml
---
include:
  - form-actions.yml
  - cover-page.yml
---
features:
  question help button: True
  question back button: True
  progress bar: True
  css: colors.css
---
modules:
  - docassemble.MACourts.macourts
  - .virtual_court_support
  - .icon
  - .formatting
---
objects:
  - interview_metadata: DADict.using(object_type=DADict.using(auto_gather=False, gathered=True))
  - users: PeopleList.using(there_are_any=True)
  - children: PeopleList
  - defendants: PeopleList
  - plaintiffs: PeopleList
  - plaintiff: Individual
  - other_parties: PeopleList
  - courts: DAList.using(auto_gather=False, gathered=True, complete_attribute='name') # Normally let's only have one court...
  - macourts: MACourtList.using(courts=['housing_courts','bmc','district_courts','superior_courts','land_court', 'juvenile_courts', 'probate_and_family_courts'])  # this is for lookups
  - witnesses: PeopleList
  - docket_numbers: DAList
  - caregivers: PeopleList
  - guardians_ad_litem: PeopleList
  - attorneys: PeopleList
  - translators: PeopleList
  - debt_collectors: PeopleList
  - creditors: PeopleList
---
comment: |
  Update this if our interview needs to handle more types of people
  This is mostly used for signature flow
  
  You can also add more people in your interview if you need them.
  Use .append() on this list.
  
  TODO: these are actually all lists...
variable name: individuals
data:
  - user
  - other_party
  - plaintiff
  - defendant
  - respondent
  - petitioner
  - spouse
  - children
  - parent
  - guardian
  - caregiver
  - guardian_ad_litem
  - attorney
  - translator
  - witness
  - debt_collector
  - creditor
---
id: who will be on this form
generic object: PeopleList
question: |
  Will this form include any ${noun_plural(x.object_name())}?
yesno: x.there_are_any
---
id: who will be on this form
generic object: VCBusinessList
question: |
  Will this form include any ${noun_plural(x.object_name())}?
yesno: x.there_are_any
---
id: names of witnesses
question: |
  List the name of each witness below
subquestion: |
  Click "${word("Add another")}" to add more.
list collect: True
fields:
  - First name: witnesses[i].name.first
  - Middle name: witnesses[i].name.middle
  - Last name: witnesses[i].name.last
    required: False
  - Suffix: witnesses[i].name.suffix
    code: |
      name_suffix()
    required: False  
---
id: names of people
generic object: PeopleList
question: |
  Please list all ${x.object_name()} below
subquestion: |
  Click "${word("Add another")}" to add more.
list collect: True
fields:
  - Is this ${noun_singular(x.object_name())} a person or business?: x[i].person_type
    input type: radio
    choices:
      - Business or organization: business
      - Person: individual
  - First name: x[i].name.first
    show if:
      variable: x[i].person_type
      is: "individual"
  - Last name: x[i].name.last
    show if:
      variable: x[i].person_type      
      is: "individual"
  - Suffix: x[i].name.suffix
    code: |
      name_suffix()
    show if:
      variable: x[i].person_type      
      is: "individual"
    required: False      
  - Name of business or organization: x[i].name.first
    show if:
      variable: x[i].person_type
      is: business
---
---
id: names of businesses
generic object: VCBusinessList
question: |
  Please list all ${x.object_name()} below
subquestion: |
  Click "${word("Add another")}" to add more.
list collect: True
fields:
  - Name: x[i].name.text
---
id: names of opposing parties
question: |
  % if users==plaintiffs:
  Please list the name of each **defendant** or respondent in this
  case below
  % else:
  Please list the name of each **plaintiff** or petitioner in this case below
  % endif
subquestion: |
  Click "${word("Add another")}" to add more.
list collect: 
  enable: True
  label: |
    % if users==plaintiffs:
    Defendant/Respondent ${i+1}    
    % else:
    Plaintiff/Petitioner ${i+1}
    % endif
fields:
  - Are they a person, or a business?: other_parties[i].person_type
    input type: radio
    choices:
      - Business or organization: business
      - Person: individual
  - First name: other_parties[i].name.first
    show if:
      variable: other_parties[i].person_type
      is: "individual"
  - Last name: other_parties[i].name.last
    show if:
      variable: other_parties[i].person_type      
      is: "individual"
  - Suffix: other_parties[i].name.suffix
    code: |
      name_suffix()
    show if:
      variable: other_parties[i].person_type      
      is: "individual"
    required: False      
  - Name of organization or business: other_parties[i].name.first
    show if:
      variable: other_parties[i].person_type
      is: business
---
id: set basic options
mandatory: True
code: |
  # Set some variables that we need in all the interviews
  multi_user = True
  allow_cron = True
  speak_text = True
  # menu_items = [action_menu_item('Review Answers', 'road_map')]
  # menu_items.append( {'url': url_ask(['share_fields', 'share_success', {'recompute': ['share_email','sent_sharing_email','share_cell','sent_sharing_text']}]), 'label': 'Share interview'})
  # menu_items = (action_menu_item('Language','language'))
  set_live_help_status(availability='available', mode='help',partner_roles=['housing','family law'])
---
id: your name
question:  |
  What is your name?
fields:
  - First Name: users[0].name.first
  - Middle Name: users[0].name.middle
    required: False
  - Last Name: users[0].name.last
  - Suffix: users[0].name.suffix
    code: |
      name_suffix()
    required: False  
---
id: birthdate question
generic object: Individual
question: |
  When was ${x} born?
fields:
  - Birthdate: x.birthdate
    datatype: date
---
id: your address
question: |
  What is your address?
subquestion: |
  What address should the court use to mail papers to you?
fields:
  - Street address: users[0].address.address
    address autocomplete: True
  - Unit: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: |
      states_list()
    default: MA      
  - Zip: users[0].address.zip
    required: False
---
id: your contact information
question: |
  What is your contact information?
subquestion: |
  The court needs to be able to reach you to schedule your hearing.
  
  Include at least **one** way to reach you other than by mail.
fields:  
  - Mobile number: users[0].mobile_number
    required: False
  - Other phone number: users[0].phone_number
    required: False
  - Email address: users[0].email    
    datatype: email
    required: False
  - Other ways to reach you: users[0].other_contact_method
    input type: area
    required: False
    help: |
      If you do not have a phone number or email the court can use, provide
      specific contact instructions. For example, use a friend's phone number.
      But the friend must be someone you can rely on to tell you the court is
      trying to reach you.
validation code: |
  if (not showifdef('users[0].phone_number') and \
      (not showifdef('users[0].mobile_number')) and \
      (not showifdef('users[0].email')) and \
      (not showifdef('users[0].other_contact_method'))):
    validation_error(word("You need to provide at least one contact method."))
help: |
  The court **must** be able to reach you. So you have to give them some way to do this.
  
  Some forms allow you to tell the court you need to keep your address, phone,
  and email confidential, so that only court staff can see this information. 
---
code: |
  users[0].address.geolocate()
  
  #try:
  local_housing_court = macourts.matching_housing_court(users[0].address)
  found_housing_court = local_housing_court
  #except:
  #  local_housing_court = DAEmpty()
  #  found_housing_court = False
---
id: name of person
generic object: Individual
question: |
  What is ${x.object_possessive('name')}?
fields:
  - First Name: x.name.first
  - Middle Name: x.name.middle
    required: False
  - Last Name: x.name.last
  - Suffix: x.name.suffix
    required: False
---    
id: any other users
question: |
  Did anyone else file with you?
subquestion: |
  % if len(users.elements) > 1:
  You have already told us about ${comma_and_list(users.complete_elements())}.
  % else:
  We need to know the name of everyone who is part of this case.
  % endif
  
  Is anyone else on your side of this case?
yesno: users.there_is_another 
---
id: other users names
question: |
  What is the name of the ${ ordinal(i) } person on your side of the case?
fields:
  - First Name: users[i].name.first
  - Middle Name: users[i].name.middle
    required: False
  - Last Name: users[i].name.last
    required: False
  - Suffix: users[i].name.suffix
    code: name_suffix()
    required: False
---
id: names of children
question: |
  Tell us about the children who will be involved in this case
subquestion: |
  Click "${word("Add another")}" to add more.
list collect: True
fields:
  - First Name: children[i].name.first
  - Middle Name: children[i].name.middle
    required: False
  - Last Name: children[i].name.last
  - Suffix: children[i].name.suffix
    required: False
  - Birthdate: children[i].birthdate
    required: False
---
code: |
  # This is a workaround for the fact that user role isn't
  # defined in the wizard-generated file yet.
  if not defined('user_role'):
    user_role = False # this should get defined to "plaintiff" or "defendant" in the actual interview
---
code: |
  if user_role == 'plaintiff':
    plaintiffs = users
    petitioners = users
    defendants = other_parties
    respondents = other_parties
  elif user_role == 'defendant':
    defendants = users
    respondents = users
    plaintiffs = other_parties
    petitioners = other_parties
    other_parties.there_are_any = True
  else:
    if user_ask_role == 'plaintiff':
      plaintiffs = users
      petitioners = users
      defendants = other_parties
      respondents = other_parties
    else:
      defendants = users
      respondents = users
      plaintiffs = other_parties
      petitioners = other_parties
      other_parties.there_are_any = True
  evaluate_role = True
---
id: user role
question: |
  Did you start this case, or are you responding to a case
  that someone else started?
fields: 
  - no label: user_ask_role
    datatype: radio
    choices:
      - Starting a new case: plaintiff
      - Responding to a case: defendant
  - note: |
      Okay, you are the **Plaintiff** or Petitioner in this case. The other 
      side is the **Defendant** or Respondent.
    show if:
      variable: user_ask_role
      is: "plaintiff"
  - note: |
      Okay, you are the **Defendant** or Respondent in this case. The other 
      side is the **Plaintiff** or Petitioner.
    show if:
      variable: user_ask_role
      is: "defendant"
help:
  label: |
    How do I know?
  content: |
    If you are the first person to file a form in the case, you 
    started the case. You are the "Plaintiff" or the "Petitioner."
  
    If you are responding to a case or court papers someone else filed, you
    are the "Defendant" or the "Respondent."
---      
id: other users there are any
question: |
  % if users == plaintiffs:
  Is there a **defendant** or respondent in this case? 
  % else:
  Is there a **plaintiff** or petitioner in this case?
  % endif
subquestion: |
  % if users == plaintiffs:
  Answer yes if there is a person or organization you are suing or taking to court.
  % else:
  You should be able to find out from the paperwork that told you to 
  go to court.
  Answer yes if someone else has sued you or is bringing you to court.
  % endif
yesno: other_parties.there_are_any
---
id: children names without birthdate
question: |
  Tell us about the children involved in this case.
subquestion: |
  Click "${word("Add another")}" to add more.
list collect: True
fields:
  - First Name: children[i].name.first
  - Middle Name: children[i].name.middle
    required: False
  - Last Name: children[i].name.last
  - Suffix: children[i].name.suffix
    required: False  
---
code: |
  children_parent_question_temp = []
  for child in children:
    pass
#---
#question: |
#  Which children are you the parent of?
#fields:
#  - 
---
id: business address
generic object: VCBusiness
question: |
  What is ${ x.possessive('address') }?
fields:
  - Street address: x.address.address
    address autocomplete: True
  - Unit: x.address.unit
    required: False
  - City: x.address.city
  - State: x.address.state
    default: MA   
    code: |
      states_list()   
  - Zip: x.address.zip
    required: False
---
id: persons address
generic object: Individual
question: |
  What is ${ x.possessive('address') }?
fields:
  - Street address: x.address.address
    address autocomplete: True
  - Unit: x.address.unit
    required: False
  - City: x.address.city
  - State: x.address.state
    default: MA   
    code: |
      states_list()   
  - Zip: x.address.zip
    required: False
---
id: persons contact information
generic object: Individual
question: What is the contact information for ${ x.name }?
fields:
  - Phone: x.phone_number
  - Email: x.email
    datatype: email
    required: False

---
id: persons signature
generic object: Individual
question: |
  ${x}, please sign below
signature: x.signature
under: |
  ${x}
progress: 99  
---
comment: |
  We default to only searching the user's address.
  
  This is a reasonable default but you may want to add
  additional addresses. E.g., the opposing party's address,
  the address where the incident took place. Especially
  if this is a responsive case.
code: |
  addresses_to_search = [users[0].address]
---
comment: |
  Ensure that addresses_to_search is the correct set of courts.
  See above--it's defined to user's address by default
code: |  
  all_matches = macourts.matching_courts(addresses_to_search, court_types=allowed_courts)
---
comment: |
  # This is the *responding* version of the court selector
  # It will also be the fallback if we don't know user_role
sets:
  - courts[0]
id: choose a court
question: |
  What court is your case in?
subquestion: |
  Look at your court paperwork. Match the name listed
  there.

  % if len(all_matches) > 0:
  Below is a map of the court(s) that serve
  the address you gave us, ${comma_and_list(addresses_to_search)}.
  
  ${map_of(combined_locations(all_matches))}
  % endif
fields:
  - no label: courts[0]
    datatype: object_radio
    choices: all_matches
    none of the above: True
    disable others: True
    object labeler: |
      lambda y: y.short_description()
    show if: 
      code: |
        len(all_matches)      
  - note: |
      Does the list above look wrong? If your case was filed in
      a court we didn't list, choose from the full list below.
    show if: 
      code: |
        len(all_matches)
  - no label: courts[0]
    datatype: object
    object labeler: |
      lambda y: y.short_label()
    choices: macourts    
help: 
  label: |
    How do I pick a court?
  content: |
    If you are responding to a case someone else filed, you may not
    get to choose your court. Select the court that is already
    listed on your court paperwork.
        
---
if: |
  # This is the *initiating* version of the court selector
  user_role == 'plaintiff'
sets:
  - courts[0]
id: choose a court
question: |
  What court do you want to file in?
subquestion: |
  % if len(all_matches) > 0:
  Below is a map of the court(s) that serve
  the address you gave us, ${comma_and_list(addresses_to_search)}.
  
  ${map_of(combined_locations(all_matches))}
  % endif
fields:
  - no label: courts[0]
    datatype: object_radio
    choices: all_matches
    none of the above: True
    disable others: True
    object labeler: |
      lambda y: y.short_description()
    show if: 
      code: |
        len(all_matches)      
  - note: |
      Does the list above look wrong? If you think you should file in a
      court we didn't list, choose from the full list below.
    show if: 
      code: |
        len(all_matches)
  - no label: courts[0]
    datatype: object
    object labeler: |
      lambda y: y.short_label()
    choices: macourts    
help: 
  label: |
    How do I pick a court?
  content: |
    For some cases, you can choose your court.
    How do you know which court to choose?
  
    Massachusetts has 7 trial court departments:
    
    * District Court
    * Boston Municipal Court (BMC)
    * Superior Court
    * Probate and Family Court
    * Juvenile Court
    * Housing Court
    * Land Court
    
    The District Court, BMC, and Superior Court are all courts that can hear
    any type of case. Housing, Probate and Family and Juvenile Court are
     **specialist** courts that hear one kind of case.
    They have judges with special training as well as special 
    resources available.
    
    Different courts can make different kinds of decisions. Not every court
    can give you every kind of help. For example, you can only
    ask for visitation in the Probate and Family Court. Only
    the Housing Court or Superior Court can hear discrimination
    cases.
    
    Depending on where you live, different courts may be further or closer to
    your address. There are about 100 district courts all over the state,
    but each county has only one or a few Superior Courts or specialty
    courts.
    
    Choosing a court means thinking about what kind of help you need, as well
    as which court you can get transportation to on the day of your hearing.
    
    Only you know the right choice.
    
    You can also view the court selection guidance at [mass.gov](https://www.mass.gov/courthouse-locator).

---
id: docket number
question: |
  What is the docket number for your case?
fields:
  - no label: docket_number
    required: False
continue button field: ask_docket_number
---
id: docket numbers
question: |
  What is the docket number for this case?
subquestion: |
  If there are multiple docket numbers on this form, you can tap "${word("Add another")}"
  to add more than one.
list collect: True
fields:
  - no label: docket_numbers[i]
    required: False
---
id: signature date
question: |
  When do you plan to file these forms that we are working on?
subquestion: |
  We automatically answer "today" for you, below. You can change the date.
fields: 
  - Date: signature_date
    datatype: date
    default: ${today().format("yyyy-MM-dd")}
---
id: signature choice
decoration: file-signature
question: |
  Sign your court forms
subquestion: |
  Your forms are almost ready. You need to sign them first.
  
  Use the mouse or touchpad on your computer or
  sign with your finger on your phone. 
   
  You can send the forms to someone else to sign if you choose the "phone" option.
field: signature_choice
buttons:  
  - Sign on my phone: phone
    image: mobile-alt
  - Sign on this computer: this device
    image: desktop
continue button field: saw_signature_choice
script: |
  <script>
    $(".da-field-buttons > div > .btn-da-custom").last().after("<br>")
    $(".da-field-buttons > div > .btn-da-custom").first().before("<br>")
  </script>
---
comment: |
  This block is shown when the user texts a link to sign a form
id: signature wait screen
question: |
  % if defined('tenant.signature'):
  Thank you for signing.
  % else:
  Sign on your phone
  % endif
subquestion: |
  % if device().is_pc:
  % if defined('tenant.signature'):
  Click ${word("next")}.
  % else:
  Click ${word("next")} on this screen once you have finished signing on your phone.
  % endif
  % else:
  You have been asked to sign this PDF. Click to review it.    
  ${form_to_sign}  
  [Make changes](${url_action('review_all_sections')})

  Click ${word("next")} on this screen when you're ready to sign.
  % endif  
field: signature_wait_screen
decoration: file-signature
---
id: signature-phone
question: |
  Sign your court forms
fields:
  - note: |
      1. Open the camera app or barcode reader app on your phone.
      2. Point it at the screen.
      3. Click the link icon that appears on the camera screen.
      4. Click ${word("next")} on your phone.
      
      <center>
      ${interview_url_as_qr()}
      </center>
    show if: 
      code: |
        device().is_pc
  - Text me a link instead: text_link
    datatype: yesnowide
    show if: 
      code: |
        device().is_pc
  - label: Cell phone number
    field: link_cell
    show if: text_link
    default: ${showifdef('users[0].phone_number')}
  - note: |
      Click ${word("next")} to add your signature.
    show if: 
      code: |
        not device().is_pc
help: |
  Many smartphones will automatically find the link on this screen when you use
  the camera app. The link
  may "float" up from the screen into a small icon you can tap.
  If your phone does not do this, use the text option instead.
continue button field: saw_signature_qrcode
---
id: signature phone followup
question: |
  Continue on the device you started the interview on
subquestion: |
  Thank you for signing. You can close this browser on your phone.
  Keep going on the computer you started the interview on.
field: signature_phone_followup  
---
template: interview_link
content: |
  Hi, ${ users[0] }  sent you a form from MassAccess. To sign the form,
  tap the link below:  
  ${interview_url()}
---
code: |
  started_on_phone = device().is_mobile
---
# Triggers some questions to ask for signatures on either desktop or mobile
# Allows sending via text/email
id: basic questions signature flow control
code: |
  if not defined('signature_fields'):
    # Not a perfect default, but typically only the user needs to sign
    # Make sure signature_fields is defined in a mandatory block
    signature_fields = ['users[0].signature']
  if started_on_phone:
    saw_signature_choice = True
    for signature in signature_fields:
      value(signature)
    # Add in logic for when we need additional signatures
  else: 
    # Three branches:
    # 1. Decided to sign on the PC
    # 2. Sent someone a link to sign the form
    # 3. Used the QR code
    saw_signature_choice
    # Branch 1: PC
    if signature_choice =='this device':
      for signature in signature_fields:
        value(signature)    
    # Check for Branch 2 or 3
    elif signature_choice == 'phone':
      saw_signature_qrcode
      # User will click next. link_cell will only be defined if they chose the texting option
      if defined('link_cell') and link_cell and task_not_yet_performed('send signature link'): 
        # They used the text option
        send_sms(task='send signature link', to=link_cell,template=interview_link)
        signature_wait_screen
        for signature in signature_fields:
          value(signature)
      else: # Branch 3: They used the QR Code. No special screen, just continue
        for signature in signature_fields:
          value(signature)
      # Show the follow-up either way
      if device().is_mobile:
        #signed = False
        #while not signed:
        #  for signature in signature_fields:
        #    signed = defined(signature) & signed
        signature_phone_followup
  basic_questions_signature_flow = True
---
code: |
  user_signature_verification = users[0].signature
---
id: basic questions intro screen
question: |
  ${interview_short_title}: Mass Access Project
subquestion: |
 
  The MassAccess Project can help you complete and file court forms in 3 steps:
  
  Step 1. Answer questions that will fill in your form for you.  
  Step 2. Preview the completed form.  
  Step 3. Email the form to the court using this secure website and save copies
  for yourself for later reference.  

  Tap the {green words} in any screen for a definition or more information.
  
  If you have questions about this form or the court process, 
  call the Trial Court’s Emergency HelpLine:  
  833-91-COURT (833-912-6878)  
  Monday-Friday  
  8:30am - 4:30pm

  % if chat_partners_available().help:
  Live help is currently available in this interview. Click the speech bubble
  (:comment-alt:) in the navigation bar to connect to a live advocate for help.
  % endif

fields:
  - To continue, you must accept the [terms of use](https://massaccess.suffolklitlab.org/privacy/): acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.        
continue button field: basic_questions_intro_screen
terms:
  green words: |
    Green words are legal terms or a short way of referring to something that needs more explanation. The definition or explanation pops up when you tap the green words.
right: |
  % if user_has_saved_answers:
  ${fa_icon("bell", color="primary", size="sm")}
  Saved answers available!  
  
  ${action_button_html(url_action('load_answer'), icon="folder-open", label=word("View answers"), size="sm" )}
  % endif    
---
code: |
  basic_questions_user_fields = True
---
generic object: Individual
code: |
  x.gender_female = x.gender == 'female'
  x.gender_male = x.gender == 'male'
  x.gender_other = ((x.gender != 'male') and (x.gender != 'female'))
---
# TODO: Language. Also, checkbox?
id: perjury intro
field: knows_about_perjury_oath
question: |
  Signing Under Oath
subquestion: |
  Everything you say here will have to be be signed "under penalties of perjury." This means that it can be a crime if you lie on this form. Before you sign, you will have to confirm that you did your best to tell the truth.
---
id: affirmation and oath of no perjury
question: |
  Signing Under Oath
subquestion: |
  Your form must be signed "under penalties of perjury."
  This means that it can be a crime if you lie on this form.
fields:
  - no label: users[0].states_above_true
    datatype: checkboxes
    minlength: 1
    choices:
      - I promise that my answers on this form are the truth under penalties of perjury
    validation messages:
      minlength: |
        You cannot keep going unless you did your best to tell the truth.
---
id: gender
generic object: Individual
question: |
  What is ${x.possessive('gender')}?
subquestion: |
  **Note**: Many forms require you to specify "Female" or "Male."
  
  If you answer something other than "Female" or "Male", we may not be able
  to check any box on your form. This may delay your case.
fields:
  - no label: x.gender
    choices:
      - Female: female
      - Male: male
      - Non-binary: non-binary
      - Prefer not to say: prefer-not-to-say
      - Prefer to write in a different gender: self-described
  - Gender: x.gender
    show if:
      variable: x.gender
      is: "self-described"
---
code: |
  ready_to_email
  prevent_going_back()
  email_status
  form_delivery_complete = True
---
code: |
  send_icon = "envelope"
---
code: |
  court_email = court_emails.get(courts[0].name,None)
  if not court_email:
    found_email = False
  else:
    found_email = True
---
code: |
  bcc_failsafe = court_emails.get('Failsafe Address',None)
---
need:
  - bcc_failsafe
  - email_to_court_template
  - court_email
  - should_cc_user
code: |
  if 'dev' in get_config('url root') or 'test' in get_config('url root'):
    bcc_email = "quinten@lemmalegal.com"
    email_to_use = "massaccess@suffolk.edu"
  else:
    email_to_use = court_email
    bcc_email = bcc_failsafe
  
  # temporary for testing
  # email_to_use = "massaccess@suffolk.edu"
  
  if task_not_yet_performed('send email'):
    log("Court email is " + court_email)
    email_success = False
    if should_cc_user:
      log('Sending email to ' + email_to_use + ' and ccing ' + cc_email + ' for ' + str(users) + ' bcc to ' + bcc_email)
      email_success = send_email(to=email_to_use, template=email_to_court_template, task='send email', cc=cc_email, bcc=bcc_email, attachments=final_form_to_file) # True # until we're ready to turn this on
    else:
      log('Sending email to ' + email_to_use + ' and no cc ' + ' for ' + str(users) + ' bcc to ' + bcc_email)
      email_success = send_email(to=email_to_use, template=email_to_court_template, task='send email', attachments=final_form_to_file, bcc=bcc_email)
    mark_task_as_performed('send email')
  sent_email_to_court = True
---
need:
  - comments_to_clerk
  - package_version_number
id: ready to email
question: |
  Final Review With Cover Page
subquestion: |
  
  Below is your ${comma_and_list(download_titles)} document with the 
  cover page that we will deliver to ${courts[0]}.
  
  Click "Back" if you need to make any changes.  
  Click "Send to court" to deliver it.
  
  Here is what the clerk at ${courts} will get:

  ${ final_form_to_file }  
  [:file-download: Download this form with cover page](${final_form_to_file.url_for(attachment=True)})

  % if found_email:
  We will deliver it securely. Please allow up to 15 minutes for the email to
  arrive.
  % else:
  There was a problem delivering this to the ${courts[0]}. We couldn't
  locate the contact information for this court.
  % endif
 
  Press below to deliver the form.
fields:
  - Send me a copy: should_cc_user
    datatype: yesno
  - Email address: cc_email
    datatype: email
    show if: should_cc_user
    default: ${users[0].email if defined('users[0].email') else ''}
continue button field: ready_to_email
continue button label: Send to court
---
need: sent_email_to_court
id: email status
question: |
  % if email_success:
  Your form will be sent within the next 15 minutes.
  % else:
  Something went wrong delivering your form
  % endif
subquestion: |
  % if email_success:
  If you do not hear from the court in 1 business day, call the Trial Court’s
  Emergency HelpLine 833-91-COURT (833-912-6878). 
  
  The Emergency HelpLine is open:  
  8:30am - 4:30pm,   
  Monday - Friday.  
  % else:
  Something went wrong delivering your form to the ${courts[0]}.  
  Try again later or call the Trial Court’s Emergency HelpLine 833-91-COURT (833-912-6878). 
  
  The Emergency HelpLine is open:  
  8:30am - 4:30pm,  
  Monday - Friday.  
  % endif
continue button field: email_status
continue button label: Back to download screen
---
id: email to court
template: email_to_court_template
subject: |
  MassAccess submission from ${users} intended for ${courts[0]}
content: |
  At ${current_datetime().format_datetime()},
  ${users} submitted the attached ${package_title} form(s).

  &nbsp;        | &nbsp;
  --------------|-----------
  Date of email | ${current_datetime().format_datetime()}
  Pages | ${num_package_pages }  
  Preferred language | ${ user_preferred_language if user_needs_interpreter else 'English' }
  Mobile phone | ${showifdef('users[0].mobile_number')}
  Other phone | ${showifdef('users[0].phone_number')}
  Email | ${showifdef('users[0].email')}
  Contact details/other | ${showifdef('users[0].other_contact_method')}
  
  Comments for clerk: 
  
  ${ showifdef('comments_to_clerk')}
  
  Please contact ${users} in the next business day to
  confirm that you received this message.
---
imports:
  - docassemble.MAVirtualCourt # INSTALLED version of the package
---
code: |
  # Build up the package version and try to convey the server and if running from playground (not installed)
  extra = ''
  if 'playground' in interview_url():
    extra = ', (playground)'
  if 'test' in get_config('url root'):
    extra += ', test'
  if 'dev' in get_config('url root'):
    extra += ', dev'
  package_version_number = str(docassemble.MAVirtualCourt.__version__) + extra
---
event: review_all_sections
question: |
  Review of your answers
subquestion: |
  
  ${showifdef('form_to_sign')}

  % if defined('form_delivery_complete'):
  **Warning: your form has already been delivered.** Any changes you make
  will _not_ be sent to the court.

  % endif
  Click a section to revisit the answers from that section.

  % for section in section_links(nav):
  * ${section}
  % endfor
  
  Press "${word("Resume")}" to resume the
  interview.
buttons:
  ${word("Resume")}: continue
---
question: |
  Do you need an interpreter?
subquestion: |
  You have the right to an interpreter. 
  
  If you are not 100% confident about speaking English, ask for an interpreter. If there is any chance:
  
  * You may not understand **everything** that is said in English. Or
  * Other people in the hearing will not be able to understand you. 
  
  Then ask.
  
  You do not have to speak only through the interpeter, but you will have one if you need one.
  
fields:
  - I need an interpreter.: user_needs_interpreter
    datatype: yesnoradio
  - My preferred language is: user_preferred_language 
    show if: user_needs_interpreter
---
code: |
  current_interview_url = user_info().filename
---
code: |
  user_has_saved_answers = len(interview_list(filename=current_interview_url)[0]) > 1 if interview_list(filename=current_interview_url) else False
---
id: load saved answers
event: load_answer
comment: |
  Docassemble 1.1.44 enabled pagination of interview_list()
question: |
  You have saved answers available for this online form
subquestion: |
  % for interview in interview_list(filename=current_interview_url)[0]:
  * ${'<a class="xyz" href="' + interview_url(i=current_interview_url, session=interview['session']) + '">' +  interview['title'] +  (' (' + interview.get("subtitle",'') + ')' if interview.get('subtitle') else '')  +"</a>" }  Last visited ${format_date(interview['modtime'])}, currently on page **${interview['dict'].get('_internal',{}).get('steps')}**
  % endfor
  
  [View all of your saved online forms](${url_of('interviews')})
---
code: |
  if len(other_parties):
    set_parts(subtitle=str(users) + ' op. ' + str(other_parties))
  else:
    set_parts(subtitle=str(users))
  update_answer_title = True
---
comment: |
  This placeholder is used in the intro screen.
  
  In general, the title should follow the format
  "Ask the court for..." or "Respond to a ..." with a short, plain language
  description of what using the interview will accomplish.
code: |
  interview_short_title = "[PLACEHOLDER: Ask the court for a ...]"
---
comment: |
  This is an ALTERNATIVE way to define the interview subtitle as a
  transition until we update all existing interviews.
code: |
  # Get all values in the interview_metadata dictionary.
  # use the `next` function to get the first entry.
  # If there is no entry, then default to an empty dictionary.
  # Then grab the title of the first value. It will be None if there is no
  # title.
  metadata_title = next(iter(interview_metadata.elements.values()),{}).get('title')
  
  # Check if the title was an actual text entry, or None
  if metadata_title:
    interview_short_title = "Ask the court for a " + metadata_title
  else:
    # This branch will happen for Docx where the interview_metadata dictionary
    # was never defined.
    interview_short_title = "[PLACEHOLDER: Ask the court for a ...]"