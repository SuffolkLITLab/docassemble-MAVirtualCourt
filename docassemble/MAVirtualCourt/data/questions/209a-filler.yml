comment: |
  Allows selecting ways to pre-fill 209A interview content.
  
  TODO:
  1. Prefill as many fields as possible to make the form as
  fast to go through as possible. Skip nothing, so order is still clear.
  1. Try to be clear about where different sections/questions are coming from.
  1. Overflow. (default or must be chosen?)
  
  Pages that are a pain to fill:
  1. Defendant info pages
  1. Lots of children
  1. Affidavit <- maybe tackle this one first with `continue button field`s
  1. Defendant prior cases info
  1. Children cases prior info
  1. Schools/daycares
  1. Children center/supervision, etc.
  
  Pages that still would have multiple fields to fill:
  1. Names
  1. Addresses
  1. Contact info
  1. Children attorneys
  1. GALs
  1. Children previous addresses
  1. Previous cases with defendant and user
  
  Other info
  1. Children over 18
  1. Former addresses
  1. Work/school locations
  1. user_preferred_language
  1. Other info to keep private
  
  Note: `invalidate()` doesn't work as a way to pre-fill questions
  and then trigger them anyway.
---
objects:
  - to_fill: DAOrderedDict
  #- acknowledged_information_use: DAOrderedDict.using('acknowledged_information_use', gathered=True, auto_gather=False, there_are_any=True)
  - profile: DAOrderedDict
---
---
id: interview_order
mandatory: True
scan for variables: False
code: |
  set_always_pre_filled
  
  if wants_to_skip[ 'affidavit' ]: skip_affidavit

  if to_fill.set_children:
    set_children
  if defined( 'to_fill.set_majors' ) and to_fill.set_majors:
    set_majors
  if defined( 'to_fill.set_daycares' ) and to_fill.set_daycares:
    set_daycares
  if defined( 'to_fill.set_visitation' ) and to_fill.set_visitation:
    set_visitation
  
  #if to_fill.set_plaintiff_keep_aways:
  #  set_plaintiff_keep_aways
  
  if to_fill.set_defendant_info:
    set_defendant_info
  
  timestamp = format_datetime( current_datetime(), 'MM_dd_yy_hh_mm' )
  filler_filename = '209a_filler_answers_' + timestamp
  
  filler_answer_key
---
id: filler
question: |
  WIP: What do you want to pre-fill?
subquestion: |
  Note: {You will have to activley support the properties you pick.}
  You can always edit pre-filled information as long as you see the
  screen that it's on.
fields:
  #- WIP Skip straight to the PDF: skip_to_pdf
  #  datatype: yesnowide
  #- WIP Skip intro (including accepting terms): to_fill.set_intro
  #  datatype: yesnowide
  #  default: True
  - "Pre-fill children": to_fill.set_children
    datatype: yesnowide
    default: True
  - Number of children: num_children
    show if: to_fill.set_children
    datatype: integer
    default: 2
  - Which of the above children are joint?: which_are_joint
    js show if: |
      parseInt(val("num_children")) > 0
    datatype: integer
    default: 0
  - Number of custody or care children: num_custody_children
    show if: to_fill.set_children
    datatype: integer
    default: 0
  - How many of those are children of the defendant?: num_of_just_def
    js show if: |
      parseInt(val("num_custody_children")) > 0
    datatype: integer
  - Pre-fill children's schools/daycares: to_fill.set_daycares
    datatype: yesnowide
    show if: to_fill.set_children
  # Worth it?
  #- Pre-fill just the date for incidents of abuse
  - note: How many schools/daycares?
    show if: to_fill.set_daycares
  - no label: num_daycares
    datatype: integer
    default: 2
    show if: to_fill.set_daycares
  - Pre-fill wants all visitation orders: to_fill.set_visitation
    datatype: yesnowide
    show if: to_fill.set_children
  - Pre-fill visitation center info: set_visitation_center
    datatype: yesnowide
    default: True
    show if: to_fill.set_visitation
  #- Pre-fill two orders for defendant to keep away from plaintiff: to_fill.set_plaintiff_keep_aways
  #  datatype: yesnowide
  - note: |
        <hr/>
        **Set defendant properties**
  - note: |
      Details: Defendant has an alias, non-english speaker,
      weapon description, drug and mental health problems, is working,
      has a car.
  - Set those details: to_fill.set_defendant_info
    datatype: yesnowide
    default: True
  - note: |
      <hr/>
      #### Skip completely
      <hr/>
      You can choose to skip your pre-filled answers completely instead of just pre-filling them. This will only skip fields that you've already chosen to pre-fill unless otherwise described - options saying '(independent)' will be skipped despite not being chosen from the pre-fill section.
  - no label: wants_to_skip
    datatype: checkboxes
    required: False
    none of the above: False
    choices:
      - Some basic plaintiff/defendant information, like names: basic_info
      - Creation of children: basic_children
      - Schools/daycares: daycares
      - Visitation centers: vistation
      - Defendant description: defendant_description
      - "Affidavit describing abuse (independent)": affidavit
under: |
  We hope this speed up testing because the tester won't have to
  type in as much text. Note: some data will **always** be filled
  in automatically when this tool is used, like the plaintiff's
  and defendant's names.
terms:
  "You will have to activley support the properties you pick.": |
    For exmaple, you can select to give the defendant an alias.
    Then, on the alias question page, you still have to mark
    that they have an alias. Once you do, you will see that the
    alias itself is already filled. Same thing with children. You
    need to select which kinds of children you do or don't have.
    
    It's the nature of this beast.
css: |
  <style>
    .question-filler input.labelauty + label {
      padding: .4rem;
      border: 1px solid darkgray;
      margin-bottom: .1rem;
    }
    .question-filler hr,
    .question-filler .form-group {
      margin: .4rem;
    }
    .question-filler hr {
      border-top-color: darkgray;
    }
    
    .question-filler p {
      margin-bottom: 0;
    }
    
    .question-filler .form-control {
      height: 2em;
      border-color: darkgray;
    }
  </style>
---
id: pre_fill_always_needed_values
sets: set_always_pre_filled
scan for variables: False
code: |
  # These always show up, so always pre-fill them

  acknowledged_information_use = DADict(
    'acknowledged_information_use', there_are_any = True,
    there_is_another = False, gathered = True
  )
  acknowledged_information_use[ 'I accept the terms of use.' ] = True
  
  #users[0].name.first = 'Pat'  # Screen trigger
  users[0].name.middle = 'Pip'
  users[0].name.last = 'Plaintiff'
  users[0].name.suffix = 'II'
  #users[0].birthdate = as_datetime('01/01/1990')  # Trigger
  
  #users[0].address.address = '1 Tremont St'  # Trigger
  users[0].address.unit = '1'
  users[0].address.city = 'Boston'
  users[0].address.state = 'MA'
  users[0].address.zip = '02108'
  #users[0].address.geolocate()  # Think triggers gathering

  #users[0].mobile_number = '000-0000'  # Screen trigger
  users[0].phone_number = '111-1111'
  users[0].email = 'pla@example.com'
  users[0].other_contact_method = 'Mail'
  
  #other_parties[0].name.first = 'Drew'  # Screen trigger
  other_parties[0].name.middle = 'Dar'
  other_parties[0].name.last = 'Def'
  other_parties[0].name.suffix = 'III'

  # other_parties[0].address.address  # Screen trigger
  other_parties[0].address.unit = '2B'
  other_parties[0].address_floor = '2'
  other_parties[0].address.city = 'Boston'
  other_parties[0].address.state = 'MA'
  other_parties[0].address.zip = '02108'
  #other_parties[0].address.geolocate()  # Triggers gathering
  other_parties[0].mobile_number = '222-2222'
  other_parties[0].phone_number = '333-3333'
  other_parties[0].email = 'def@example.com'
  other_parties[0].name_door_mailbox = 'Def'
  
  #other_parties[0].location_best  # Screen trigger
  other_parties[0].best_times_find = '2pm'
  other_parties[0].locations_other = 'Home'
  other_parties[0].location_information_other = 'Shop'

  #  # Screen trigger
  
  related_as_couple = DADict( 'related_as_couple' )
  related_as_couple[ 'engaged' ] = True
  related_as_couple[ 'dating' ] = True
  related_as_couple[ 'dated' ] = True
  related_as_couple[ 'past_engaged' ] = True
  related_as_couple.there_is_another = False
  related_as_couple.gathered = True
  
  # Worth it?
  #incidents_of_abuse.appendObject()
  #incidents_of_abuse[0].date = '01/01'
  
  if wants_to_skip[ 'basic_info' ]:
    users[0].name.first = 'Pat'  # Screen trigger
    users[0].birthdate = as_datetime('01/01/1990')  # Trigger
    users[0].address.address = '1 Tremont St'  # Trigger
    users[0].mobile_number = '000-0000'  # Screen trigger
    other_parties[0].name.first = 'Drew'  # Screen trigger
    other_parties[0].address.address = '2 Tremont St'  # Screen trigger
    other_parties[0].location_best = 'Work'  # Screen trigger
  
  log( 'set_always_pre_filled', 'console' )  
  set_always_pre_filled = True
---
id: skip affidavit
sets: skip_affidavit
scan for variables: False
code: |
  user_saw_abuse_explanation = True
  defendant_abuse_caused_physical_harm = True
  defendant_abuse_attempted_physical_harm = True
  defendant_abuse_caused_fear_of_serious_physical_harm = True
  defendant_abuse_caused_sexual_assault_force = True
  defendant_abuse_caused_sexual_assault_make = True
  
  complaint_209A_Affidavit_intro = True
  complaint_209A_Affidavit_intro_2 = True
  complaint_209A_Affidavit_intro_3 = True
  
  incidents_of_abuse.auto_gather=False
  num_incidents = 30
  for abuse_i in range( num_incidents ):
    i_num = str( abuse_i )
    #incident = incidents_of_abuse.appendObject( DADict )
    incidents_of_abuse[ abuse_i ].year = '200' + i_num[ -1 ]
    incidents_of_abuse[ abuse_i ].date = ordinal_number( abuse_i + 1, use_word=False )
    incidents_of_abuse[ abuse_i ].time_of_day = i_num + 'pm'
    incidents_of_abuse[ abuse_i ].location = 'INCIDENT ' + i_num + ' START my living room'
    incidents_of_abuse[ abuse_i ].description = 'I got pushed against the wall. The neigbors called and the police came.'
    incidents_of_abuse[ abuse_i ].police_included = True
    incidents_of_abuse[ abuse_i ].injuries_describe = True
    incidents_of_abuse[ abuse_i ].injuries_edit = False
    incidents_of_abuse[ abuse_i ].medical_add = False
    incidents_of_abuse[ abuse_i ].feelings = 'bad'
    incidents_of_abuse[ abuse_i ].summary = incidents_of_abuse[ abuse_i ].description + space("incidents_of_abuse[" + str( abuse_i ) + "].feelings", prefix=' Because of what happened, I felt ') + 'INCIDENT ' + i_num + '/' + str( num_incidents ) + ' END'

  incidents_of_abuse.gathered = True

  affidavit_summary = ''
  for incident in incidents_of_abuse:
    affidavit_summary += incident.summary + '\n\n'
  affidavit_body = affidavit_summary
  saw_incidents = True

  skip_affidavit = True
---
comment: |
  '''
  # To use for court map when it arrives. Need to find shorter address.
  #users[0].address.address = '1 Tremont St'
  users[0].address.unit = '1'
  users[0].address.city = 'Boston'
  users[0].address.state = 'MA'
  users[0].address.zip = '02108'
  users[0].address.geolocate()
  
  #other_parties[0].address.address = '2 Tremont St'
  other_parties[0].address.unit = '2'
  other_parties[0].address.city = 'Boston'
  other_parties[0].address.state = 'MA'
  other_parties[0].address.zip = '02108'
  other_parties[0].address.geolocate()
  '''
---
id: children_names_and_ages
sets: set_children
scan for variables: False
code: |

  # Non-custody children of the right number
  int_children = int( num_children )
  children.target_number = int_children

  curr_num_joint = 0
  for child_i in range( int_children ):
    #children[ child_i ].name.first = 'Child' + child_num  # Trigger
    if wants_to_skip[ 'basic_children' ]:
      plaintiff_has_children_parent_of = True
      children[ child_i ].name.first = 'Cade' + str( child_i )
    children[ child_i ].name.middle = 'Child of'
    children[ child_i ].name.last = 'Plaintiff'
    children[ child_i ].name.suffix = 'Jr'
    # Birthdate
    date_str = '01/01/2011'
    children[ child_i ].birthdate = as_datetime( date_str )
    # Defendant
    if curr_num_joint < int( which_are_joint ):
      children[ child_i ].defendant_is_parent = True
    else:
      children[ child_i ].defendant_is_parent = False
    curr_num_joint = curr_num_joint + 1

  # Children under plaintiff's care or custody
  int_custody_children = int( num_custody_children )
  children_cares_for.target_number = int_custody_children

  curr_num_of_def = 0
  for c_child_i in range( int_custody_children ):
    #children_cares_for[ c_child_i ].name.first = 'Cody' + child_num  # Trigger
    if wants_to_skip[ 'basic_children' ]:
      plaintiff_has_children_cares_for = True
      children_cares_for[ c_child_i ].name.first = 'Cody' + str( c_child_i )
    children_cares_for[ c_child_i ].name.middle = 'Child of'
    children_cares_for[ c_child_i ].name.last = 'Care'
    children_cares_for[ c_child_i ].name.suffix = 'Jr'
    # Birthdate
    date_str = '02/02/2012'
    children_cares_for[ c_child_i ].birthdate = as_datetime( date_str )
    # Defendant
    if curr_num_of_def < int( num_of_just_def ):
      children_cares_for[ c_child_i ].defendant_is_parent = True
    else:
      children_cares_for[ c_child_i ].defendant_is_parent = False
    curr_num_of_def = curr_num_of_def + 1
  
  if wants_to_skip[ 'basic_children' ]:
    plaintiff_has_minor_children = True
    if int( which_are_joint ) > 0:
      defendant_and_plaintiff_are_parents_of_child = True
    else:
      defendant_and_plaintiff_are_parents_of_child = False
    if int( num_custody_children ) > 0:
      plaintiff_has_children_cares_for = True
    else:
      plaintiff_has_children_cares_for = False

  log( 'set_children', 'console' )
  set_children = True
---
# Wants custody of - can set requests_custody
comment: |
  - I need custody of the ${children.as_noun()} I have in common with ${other_parties.familiar()}.: requests_custody
    datatype: yesnoradio
  - Which children do you need custody of?: wants_custody_of  # Trigger
    show if: requests_custody
    datatype: object_checkboxes
    choices: |
      children_of_both
    object labeler: |
      lambda y: y.familiar()
    none of the above: False 
    minlength: 1
  validation code: |
    if not requests_custody:
      wants_custody_of = PeopleList(gathered=True, auto_gather=False)
---
# Wants no contact for - can set request_no_contact
comment: |
  - I need the judge to order 'No contact.': request_no_contact
    datatype: yesnoradio
  - Which children?: wants_no_contact_for  # Trigger
    datatype: object_checkboxes
    show if: request_no_contact
    choices: |
      children + children_cares_for
    object labeler: |
      lambda y: y.familiar()
    minlength: 1      
    none of the above: False
  validation code: |
    if not request_no_contact:
      wants_no_contact_for = PeopleList(gathered=True,auto_gather=False)
---
id: daycares
sets: set_daycares
scan for variables: False
code: |
  
  daycares_int = int( num_daycares )
  for daycare_i in range( daycares_int ):
    daycare_num = str( daycare_i + 1 )
    daycare = schools_to_stay_away_from.appendObject()
    if wants_to_skip[ 'daycares' ]:
      daycare.name.text = 'School ' + daycare_num  # Triggers question
    daycare.address.address = daycare_num + 'School St'
    daycare.address.unit = daycare_num
    daycare.address.city = 'Boston'
    daycare.address.state = 'MA'
    daycare.address.zip = daycare_num * 5
  schools_to_stay_away_from.there_is_another = False
  schools_to_stay_away_from.gathered = True

  log( 'set_daycares', 'console' )
  set_daycares = True
---
id: visitation
sets: set_visitation
scan for variables: False
code: |

  if wants_to_skip[ 'vistation' ]:
    # Not sure what this affects
    # include_children_in_order = True  # Triggers one question
    wants_visitation_orders = True  # Triggers one question
    prohibit_visitation = False  # Triggers one question
    wants_center = True  # Triggers screen

  if set_visitation_center:
    visitation_center_name = 'Visits R Us'
    pays_for_center = 'other'
    other_pays_for_center = 'My Friend'

  wants_supervision = True
  visitation_supervisor_name_full = 'Val'
  supervision_time = '5pm'
  supervision_payer = 'other'
  other_supervision_payer = 'My Pal'

  wants_pickup = True
  who_picks_up = 'Picker upper'

  wants_other_order = True
  other_order = 'Order this.'

  log( 'set_visitation', 'console' )
  set_visitation = True
---
# Children over 18 needing child support names
# Low priority
---
id: set_plaintiff_keep_aways
sets: set_plaintiff_keep_aways
scan for variables: False
code: |
  #order_defendant_remain_away_plaintiff_residence_yes  # Trigger
  #order_defendant_no_contact_unless_court_authorized_yes = True
  #order_defendant_remain_away_plaintiff_workplace_yes = True
  #order_defendant_remain_away_plaintiff_school_yes = True
  
  # Is impoundment part of keep aways mentally for testers?
  #order_impound_plaintiff_address_residential_yes  # Trigger
  
  set_plaintiff_keep_aways = True
---
id: defendant_info
sets: set_defendant_info
scan for variables: False
code: |
  # We only have one profile now, but we can hope
  set_defendant_info_profile_1 = True

  if set_defendant_info_profile_1:
    defendant_info_profile_1

  set_defendant_info = True
---
id: defendant_profile_1
sets: defendant_info_profile_1
scan for variables: False
code: |
  #defendant_has_alias  # Screen trigger
  other_parties[0].name_other = 'Defe'
  other_parties[0].gender = "female"
  
  #other_parties[0].understands_english  # Screen trigger
  other_parties[0].language_other = 'Farsi'
  parents = DAList(
    'parents', there_are_any = True,
    there_is_another = False, gathered = True
  )
  parents[0] = 'Def Mom'
  parents[1] = 'Def Dad'
  other_parties[0].birthplace = 'Denver, CO'
  other_parties[0].social_security_number = '2222'  # Not populating?
  
  #other_parties[0].photo_yes = False  # Triggers one question
  
  #other_parties[0].race  # Screen trigger
  other_parties[0].eye_color = 'Amber'
  other_parties[0].eye_other = 'Round'
  other_parties[0].hair_color = 'other'
  other_parties[0].hair_color_other = 'Pink'
  other_parties[0].hair_other_style = 'Long'
  
  #dont_know_birthdate = False   # Screen trigger
  other_parties[0].height = '5 ft'
  other_parties[0].birthdate = as_datetime('02/22/2000')
  other_parties[0].weight = '222 lb'
  other_parties[0].physical_build = DADict(
    'other_parties[0].physical_build', there_are_any = True,
    there_is_another = False, gathered = True
  )
  other_parties[0].physical_build[ 'Small' ] = True
  other_parties[0].physical_other = DADict(
    'other_parties[0].physical_other', there_are_any = True,
    there_is_another = False, gathered = True
  )
  other_parties[0].physical_other[ 'Full beard' ] = True
  other_parties[0].physical_other_details = 'Limp'

  #defendant_has_guns['gun']  # Screen trigger
  defendant_has_guns = DADict(
    'defendant_has_guns', there_are_any = True,
    there_is_another = False, gathered = True
  )
  defendant_has_guns[ 'ammo' ] = True
  defendant_has_guns[ 'FID' ] = True
  defendant_has_guns[ 'license' ] = True
  defendant_weapons_description = 'Big'
  
  #other_parties[0].police_violence_yes  # Screen trigger
  other_parties[0].drug_alcohol_yes = True
  other_parties[0].drug_alcohol_abuse = 'Lots'
  other_parties[0].psychiatric_emotional_problems_yes = True
  other_parties[0].psychiatric_emotional_problems = 'Sad'
  
  #defendant_not_employed  # Screen trigger
  other_parties[0].employer = 'Boss'
  other_parties[0].work_address = 'Deli'
  other_parties[0].work_phone = '444-4444'
  other_parties[0].work_title = 'Worker'
  other_parties[0].work_department = 'Staff'
  other_parties[0].work_hours = '2-3'
  
  #other_parties[0].does_not_have_car  # Screen trigger
  other_parties[0].vehicle_color = 'Black'
  other_parties[0].vehicle_make = 'A make'
  other_parties[0].vehicle_model = 'A model'
  other_parties[0].vehicle_year = '2020'
  other_parties[0].vehicle_license_plate = '22 2222'

  if wants_to_skip[ 'defendant_description' ]:
    defendantinformation209A0008_intro = True
    defendant_has_alias = True  # Screen trigger
    other_parties[0].understands_english = False  # Screen trigger
    other_parties[0].photo_yes = False  # Triggers one question
    other_parties[0].race = 'White'  # Screen trigger
    dont_know_birthdate = False   # Screen trigger
    defendant_has_guns['gun'] = True  # Screen trigger
    other_parties[0].police_violence_yes = True  # Screen trigger
    defendant_not_employed = False  # Screen trigger
    other_parties[0].does_not_have_car = False  # Screen trigger

  defendant_info_profile_1 = True
---
id: filler answer key
field: filler_answer_key
# Would put this in a different file since this is getting
# way too long, but I'm sure no one wants it to take up
# multiple files in the list of files.
question: |
  These are the presets the filler has created.
attachment:
  - name: Filler answer key
    filename: ${ filler_filename }
    description: |
      Filler answer key for ${ format_datetime( current_datetime(), 'MM/dd/yy at hh:mm' ) }
    content: |
      [TIGHTSPACING]
      
      # Always pre-filled

      |Field | Value |
      |---|-|
      |**User general info**|
      |_suggested user first name_ | `Pat`|
      |user middle name |`${ users[0].name.middle }`|
      |user last name |`${ users[0].name.last }`|
      |user name suffix |`${ users[0].name.suffix }`|
      |-|-|
      |_suggested user birthdate_|`01/01/1990`|
      |-|-|
      |_suggested user street address_|`1 Tremont St`|
      |user unit|`${ users[0].address.unit }`|
      |user city|`${ users[0].address.city }`|
      |user state|`${ users[0].address.state }`|
      |user zip|`${ users[0].address.zip }`|
      |-|-|
      |_suggested user mobile number_|`000-0000`|
      |user phone number|`111-1111`|
      |user email|`pla@example.com`|
      |user other contact method description|`Mail`|
      |**Defendant general info**|-|
      |-|-|
      |_suggested defendant first name_|`Drew`|
      |defendant middle name|`${ other_parties[0].name.middle }`|
      |defendant last name|`${ other_parties[0].name.last }`|
      |defendant name suffix|`${ other_parties[0].name.suffix }`|
      |-|-|
      |_suggested defendant street address_|`2 Tremont St`|
      |defendant unit|`${ other_parties[0].address.unit }`|
      |defendant floor|`${ other_parties[0].address_floor }`|
      |defendant city|`${ other_parties[0].address.city }`|
      |defendant state|`${ other_parties[0].address.state }`|
      |defendant zip|`${ other_parties[0].address.zip }`|
      |defendant mobile number|`${ other_parties[0].mobile_number }`|
      |defendant phone number|`${ other_parties[0].phone_number }`|
      |defendant email|`${ other_parties[0].email }`|
      |defendant name on mailbox|`${ other_parties[0].name_door_mailbox }`|
      |-|-|
      |_suggested best place to find defendant_|`Work`|
      |best times to find defendant|`${ other_parties[0].best_times_find }`|
      |other place to find defendant|`${ other_parties[0].locations_other }`|
      |defendant's other location information (a little weird)|`${ other_parties[0].location_information_other }`|
      |-|-|
      |**Defendant and plaintiff relationship**|-|
      |_This one makes sure you can see all of them checked off on the PDF. Believe it or not, it is actually possible to select all of them at once._|
      |Are dating|`Yes`|
      |Previously dated|`Yes`|
      |Are engaged|`Yes`|
      |Were engaged|`Yes`|

      # Children
      
      % if not to_fill.set_children:
      No pre-fills
      
      % else:
      _Each child has information based on which number child they are._

      |Field | Value |
      |---|-|
      |**Children of plaintiff**|
      number of children|`${ int( num_children ) }`
      %if int( num_children ) > 0:
      _suggested first name_|`Cade1`, `Cade2`, `Cade3`, etc.
      middle name|`Child of`
      last name|`Plaintiff`
      suffix|`Jr`
      birthdate|${ children[0].birthdate }
      defendant is their parent|`${ int( which_are_joint ) }`
      % endif
      |**Children in care or custody of plaintiff**|
      number of children|`${ int( num_custody_children ) }`
      % if int( num_custody_children ) > 0:
      _suggested first name_|`Cody1`, `Cody2`, `Cody3`, etc.
      middle name|`Child of`
      last name|`Care`
      suffix|`Jr`
      birthdate| ${ children_cares_for[0].birthdate }
      defendant is their parent|`${ int( num_of_just_def ) }`
      % endif
      % if defined( 'to_fill.set_majors' ) and to_fill.set_majors:
      wip
      % endif
      % if defined( 'to_fill.set_daycares' ) and to_fill.set_daycares:
      |-|-|
      |**Daycares or schools**|
      number of daycares or schools| `${ int( num_daycares ) }`
      _suggested name_| School 1, School 2, School 3, etc.
      facility street address| `1 School St`, `2 School St`, `3 School St`, etc.
      facility unit| `1`, `2`, `3`, etc.
      facility city| `Boston`
      facility state| `MA`
      facility zip| `11111`, `22222`, `33333`, etc.
      % endif
      % if defined( 'to_fill.set_visitation' ):
      |-|-|
      |**Visitation orders**|
      % if to_fill.set_visitation:
      _suggested wants to allow visitation_| `Yes`
      % if set_visitation_center:
      _suggested wants a visitation center_| `Yes`
      visitation center name| `${ visitation_center_name }`
      who pays visitation center| `${ pays_for_center }`
      name of payor| `${ other_pays_for_center }`
      % else:
      _suggested wants a visitation center_ | `No`
      % endif
      wants supervision during visit | ${ '`Yes`' if wants_supervision else '`No`' }
      visitation supervisor name | ${ visitation_supervisor_name_full }
      supervision time | ${ supervision_time }
      who pays for supervision | ${ supervision_payer }
      name of supervision payor | ${ other_supervision_payer }
      wants someone else to pickup the child | ${ 'Yes' if wants_pickup else 'No' }
      who picks up the child | ${ who_picks_up }
      wants other visitation order from the court | ${ 'Yes' if wants_other_order else 'No' }
      the other order | ${ other_order }
      % else:
      _suggested wants to allow visitation_| `No` 
      % endif
      % endif
      % endif

      # Defendant description
      
      % if not to_fill.set_defendant_info:
      No pre-fills

      % else:
      | Field | Value |
      |---|-|
      |**Background**|
      |_suggested defendant has an alias_|`Yes`|
      |defendant alias|`${ other_parties[0].name_other }`
      |defendant gender|`${ other_parties[0].gender }`
      |-|-|
      |_suggested defendant understands english_|`No`|
      |defendant's other language|`${ other_parties[0].language_other }`
      |defendant's mom|`${ parents[0] }`
      |defendant's dad|`${ parents[1] }`
      |defendant's birthplace|`${ other_parties[0].birthplace }`
      |defendant's social security number (might not be working)|`${ other_parties[0].social_security_number }`
      |-|-|
      |**Physical Description**|
      |_suggested defendant's race_|`White`|
      |defendant's eye color|`${ other_parties[0].eye_color }`
      |defendant's other eye description|`${ other_parties[0].eye_other }`
      |defendant's hair color|`${ other_parties[0].hair_color }`
      |defendant's hair color description|`${ other_parties[0].hair_color_other }`
      |defendant's hair other style|`${ other_parties[0].hair_other_style }`
      |-|-|
      |suggested defendant's height|`${ other_parties[0].height }`|
      |defendant's birthdate|`${ other_parties[0].birthdate }`|
      |defendant's weight|`${ other_parties[0].weight }`|
      |defendant's physical build|`${ other_parties[0].physical_build }`|
      |defendant's other physical features|`${ other_parties[0].physical_other }`|
      |defendant's other physical details|`${ other_parties[0].physical_other_details }`|
      |-|-|
      |**Weapons**|-|
      |_suggested defendant has guns_|`Yes`|
      |defendant has ammo|`${ '`Yes`' if defendant_has_guns[ 'ammo' ] is True else '`No`' }`|
      |defendant has FID|`${ '`Yes`' if defendant_has_guns[ 'FID' ] is True else '`No`' }`|
      |defendant has license|`${ '`Yes`' if defendant_has_guns[ 'license' ] is True else '`No`' }`|
      |weapons description|`${ defendant_weapons_description }` |
      |-|-|
      |**Mental health**|-|
      |_suggested defendant has been violent towards police_|`Yes`|
      |defendant uses drugs or alcohol|`${ other_parties[0].drug_alcohol_yes }`
      |defendant description of substance abuse|`${ other_parties[0].drug_alcohol_abuse }`
      |defendant has psychiatric emotional problems|`${ other_parties[0].psychiatric_emotional_problems_yes }`
      |description of psychiatric emotional problems|`${ other_parties[0].psychiatric_emotional_problems }`
      |-|-|
      |**Employment & car**|-|
      _suggested defendant doesn't have a job_|`(already unchecked) No`
      defendant's employer| `${ other_parties[0].employer }`
      defendant's work address| `${ other_parties[0].work_address }`
      defendant's work phone| `${ other_parties[0].work_phone }`
      defendant's title| `${ other_parties[0].work_title }`
      defendant's department| `${ other_parties[0].work_department }`
      defendant's hours| `${ other_parties[0].work_hours }`
      |-|-|
      _suggested defendant does not have car_|`No (already unchecked)`
      defendant car color|`${ other_parties[0].vehicle_color }`
      defendant car make|`${ other_parties[0].vehicle_make }`
      defendant car model|`${ other_parties[0].vehicle_model }`
      defendant car year|`${ other_parties[0].vehicle_year }`
      defendant license plate|`${ other_parties[0].vehicle_license_plate }`
      % endif
---
include:
  - 209a_package.yml
