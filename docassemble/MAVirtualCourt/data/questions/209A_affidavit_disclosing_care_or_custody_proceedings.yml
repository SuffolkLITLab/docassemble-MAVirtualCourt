---
include:
  - docassemble.MAVirtualCourt:basic-questions.yml  
  #- basic-questions.yml
---
objects:
  - other_care_custody_proceedings: OtherProceedingList
  - signing_attorney: VCIndividual
  # - children: PeopleList.using(complete_attribute='child_complete')
  - others_in_proceedings: PeopleList.using(auto_gather=False) # Formerly box8_people. People named as parties in other care/custody. We'll filter to remove dupes
  - attorneys_for_children: PeopleList.using(auto_gather=False)
  - attorneys_for_children[i].represented_children: PeopleList
  - attorneys_for_parents: PeopleList.using(auto_gather=False)
---
id: interview_order_A_affidavit_disclosing_care_or_custody_proceedings0009
code: |
  # This is a placeholder to control logic flow in this interview
  # It was generated from interview_generator.py as an 'interview order' type question.  
  basic_questions_intro_screen 
  # A_affidavit_disclosing_care_or_custody_proceedings0009_intro # enable for standalone
  # Set the preferred/allowed courts for this interview
  preferred_court = interview_metadata["A_affidavit_disclosing_care_or_custody_proceedings0009"]["preferred court"]
  allowed_courts = interview_metadata["A_affidavit_disclosing_care_or_custody_proceedings0009"]["allowed courts"]
  # courts.gather()
  # str(courts[0])
  # fill_in_court_name
  defendants.there_are_any = True  
  case_name
  # children.there_are_any = True
  # children.gather()
  assigned_letters # Give each "children_of_both" a letter from A-Z
  # explain_addresses_of_children  # Take out for standalone
  # for child in children_of_both: # Enable this for standalone
  #   child.child_complete
  # child1_name_last_first
  confidential_address
  # for child in children_of_both:
  #   child.address.on_one_line(include_unit=True)  
  has_participated_custody_case
  # initialize_attorney_lists
  other_care_custody_proceedings.gather()
  for case in other_care_custody_proceedings:
    if case.is_open:
      case.atty_for_user
      if case.atty_for_children and len(case.children) > 1:
        case.attorneys_for_children.gather()
        # for child in case.children:
        #   child.represented
      if case.has_gal:
        case.gals.gather()
  # Make sure these are defined after we go through the cases
  attorneys_for_children.gathered
  attorneys_for_parents.gathered
  gals_investigators
  removed_other_people_duplicates

  impound_affidavit
  # day # uncomment for standalone

  needs_attorney_signature
  
  need_past_address_appendix
  need_children_appendix
  need_other_parties_appendix

  # str(users[0])
  # users[0].address.on_one_line(include_unit=True)
  # str(users[0])  #mark_unfilled_fields_empty(interview_metadata["A_affidavit_disclosing_care_or_custody_proceedings0009"])
  # docket_numbers[0]  # Enable this if a standalone form
  # A_affidavit_disclosing_care_or_custody_proceedings0009_preview_question # Pre-canned preview screen
  # basic_questions_signature_flow
  # users[0].signature
  A_affidavit_disclosing_care_or_custody_proceedings0009 = True
# ---
# code: |
#   att
#   initialize_attorney_lists = True
---
code: |
  DCF = VCIndividual("DCF")
  DCF.address = DAEmpty()
  DCF.address_for_form = DAEmpty()
  DCF.name.first = "Department of Children and Families"
---
sets: DCF.child_letters
code: |
  for case in other_care_custody_proceedings:
    if hasattr(case, 'other_parties') and case.other_parties and DCF in case.other_parties.complete_elements():
      if not hasattr(DCF, 'child_letters'):
        DCF.child_letters = case.child_letters()
      else:
        DCF.child_letters = filter_letters([case.child_letters(), DCF.child_letters])
    else:
      DCF.child_letters = ''
---
code: |
  # children_of_both should have objects pointing to the master children list
  children[i].address.address
  children[i].previous_addresses.gather()
  children[i].child_complete = True
---
question: |
  Addresses of children
subquestion: |
  In the next few questions, we'll ask you about the addresses of each child.

  We need to include this information together with the other information
  about past care or custody cases.
continue button field: explain_addresses_of_children  
---
question: |
  Has ${children[i]} lived anywhere else in the last 2 years?
yesno: children[i].previous_addresses.there_are_any  
---
generic object: VCIndividual
question: |
  Tell us about the ${ordinal(i)} previous address for ${x}
subquestion: |
  You'll have a chance to add more in the next question
#list collect: True # This breaks when list collect is turned on
fields:
  - Address: x.previous_addresses[i].address
    address autocomplete: True
  - Unit:     x.previous_addresses[i].unit
    required: False
  - City: x.previous_addresses[i].city
  - State: x.previous_addresses[i].state
    code: |
      states_list()
    default: "MA"
---
question: |
  Tell us about the ${ordinal(j)} previous address for ${children[i]}
subquestion: |
  You'll have a chance to add more in the next question
#list collect: True # This breaks when list collect is turned on
fields:
  - Address: children[i].previous_addresses[j].address
    address autocomplete: True
  - Unit:     children[i].previous_addresses[j].unit
    required: False
  - City: children[i].previous_addresses[j].city
  - State: children[i].previous_addresses[j].state
    code: |
      states_list()
    default: "MA"
---
generic object: VCIndividual
code: |
  x.past_addresses_on_one_line = comma_and_list(x.previous_addresses)
  # Below is a typo in the PDF FIXED on 4/24
  # x.past_addresses_on_one_line = comma_and_list(x.previous_addresses)
---
question: |
  Has ${children[i]} lived anywhere else in the last 2 years?
subquestion: |
  So far you have told us about ${comma_and_list(children[i].previous_addresses.elements)}
yesno: children[i].previous_addresses.there_is_another  
---
reconsider: True
code: |
  collected_addresses = [child.address for child in children_of_both.elements if defined('child.address.address')] + [user.address for user in users]
---
code: |
  have_pending_cases = len(other_care_custody_proceedings.filter(is_open=True)) > 0
---
code: |
  case_name = str(plaintiffs) + ' v ' + str(defendants)
---
question: |
  What is the name of the person on the other side of this case?
subquestion: |
  For example: the person you want to be protected from or the person
  you are divorcing.
  
  If you need to list more than one person on this form, you can click
  "Add another".
fields:
  - First name: other_parties[i].name.first
  - Middle: other_parties[i].name.middle
    required: False
  - Last: other_parties[i].name.last
    required: False
  - Suffix: other_parties[i].name.suffix
    code: |
      name_suffix()
    required: False      
list collect: True      
---
if: |
  not defined('preferred_court') or preferred_court != 'Housing Court'
id: court information
sets:
  - courts[0].name
question: |
  What court is your case being heard in?
subquestion: |
  Your case can be heard in these courts: ${comma_and_list(allowed_courts)}.
  You can try finding your local court by using the [Courthouse Locator](https://www.mass.gov/guides/find-a-courthouse-serving-you).
  
  Click ${word("help")} to learn more about choosing a court. This can be complicated in a 209A restraining order.
fields:
  - Court name: courts[0]
    datatype: object
    choices: macourts.filter_courts(allowed_courts)
continue button field: ask_court_question    
help: |
  You can get a 209A restraining order at the District Court near where you live or theProbate and Family Court in your county.  If you live in Boston, you can go to the Boston Municipal Court (BMC) near where you live instead of a District Court. You can also go to the Superior Court in your county.  Most people get 209A restraining orders from District Court, BMC, or Probate and Family Court.  Superior Court restraining orders are rare but may be an option when other available courts are closed due to the COVID-19 crisis. 
  
  If you have moved to another town in Massachusetts since the abuse, you can go to the court where you live now or to the court for an address that you had to leave because of the abuse. 
  
  Some things to think about when you are deciding which court is better for you are:  
  
  #### If the other parent wants to visit your child  
  The District Court is not supposed to order visitation between the other parent and your child as part of a 209A case. The Probate and Family Court can order visitation in a 209A case.  If you want to get visitation settled right away, you might want to go to the Probate and Family Court to file for the 209A restraining order. If you do not want the court to decide about visitation, you might want to go to the District Court for your 209A restraining order. 
  #### If the person who abused you is facing criminal charges  
  If the person who abused you is facing criminal charges related to the domestic violence, you might want to file for your 209A restraining order at the District or Superior Court where that case is. That way, you may be able to work with the same Victim/Witness Advocate for both cases.
  
  Read more at: [https://www.masslegalhelp.org/domestic-violence/where-can-i-get-209a](https://www.masslegalhelp.org/domestic-violence/where-can-i-get-209a)
---
code: |
  if 'District' in courts[0].name:
    courts[0].division_district_court = courts[0].division
  elif 'Superior' in courts[0].name:
    courts[0].division_superior_court = courts[0].division
  elif 'Juvenile' in courts[0].name:
    courts[0].division_juvenile_court = courts[0].division
  elif 'Probate' in courts[0].name:
    courts[0].division_family_court = courts[0].division
  elif 'Municipal' in courts[0].name: 
    courts[0].division_bmc = courts[0].division
  fill_in_court_name = True
---
code: |
  user_role = 'plaintiff'
---
mandatory: True
code: |
  interview_metadata # make sure we initialize the object
  if not defined("interview_metadata['A_affidavit_disclosing_care_or_custody_proceedings0009']"):
    interview_metadata.initializeObject('A_affidavit_disclosing_care_or_custody_proceedings0009')
  interview_metadata['A_affidavit_disclosing_care_or_custody_proceedings0009'].update({
    'title': 'Affidavit Disclosing Care or Custody Proceedings',
    'short title': 'Affidavit of Care',
    'description': 'Complete in 209As with children if required by page 2 of complaint, as well as in various probate proceedings',
    'original_form': 'https://www.mass.gov/files/documents/2017/09/01/ocaj-aff-care-custody.pdf',
    'allowed courts': [
      'Boston Municipal Court',
      'District Court',
      'Juvenile Court',
      'Probate and Family Court',
      'Superior Court',
    ],
    'preferred court': 'Probate and Family Court',
    'categories': [
      'Domestic Violence / Safety of self',
      'Family Law',
    ],
    'logic block variable': 'A_affidavit_disclosing_care_or_custody_proceedings0009',
    'attachment block variable': 'A_affidavit_disclosing_care_or_custody_proceedings0009_attachment',
    'typical role': 'plaintiff',
    'built_in_fields_used': [
      {'variable': 'docket_number',
       'transformed_variable': 'docket_numbers[0]',
      },
      {'variable': 'user_name_full',
       'transformed_variable': 'str(users[0])',
      },
      {'variable': 'child1_address_on_one_line',
       'transformed_variable': 'children[1-1].address.on_one_line(include_unit=True)',
      },
      {'variable': 'child2_address_on_one_line',
       'transformed_variable': 'children[2-1].address.on_one_line(include_unit=True)',
      },
      {'variable': 'child3_address_on_one_line',
       'transformed_variable': 'children[3-1].address.on_one_line(include_unit=True)',
      },
      {'variable': 'user_address_on_one_line',
       'transformed_variable': 'users[0].address.on_one_line(include_unit=True)',
      },
      {'variable': 'user_signature',
       'transformed_variable': 'users[0].signature',
      },
      {'variable': 'user_name_full__1',
       'transformed_variable': 'str(users[0])',
      },
      {'variable': 'child1_address_street',
       'transformed_variable': 'children[1-1].address.address',
      },
      {'variable': 'child1_address_city_state_zip',
       'transformed_variable': 'children[1-1].address.line_two()',
      },
      {'variable': 'child2_address_street',
       'transformed_variable': 'children[2-1].address.address',
      },
      {'variable': 'child2_address_city_state_zip',
       'transformed_variable': 'children[2-1].address.line_two()',
      },
      {'variable': 'child3_address_street',
       'transformed_variable': 'children[3-1].address.address',
      },
      {'variable': 'child3_address_city_state_zip',
       'transformed_variable': 'children[3-1].address.line_two()',
      },
      {'variable': 'user_address_on_one_line__2',
       'transformed_variable': 'users[0].address.on_one_line(include_unit=True)',
      },
      ],
    'fields': [
      {'variable': 'case_name',
       'transformed_variable': 'case_name',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'court_division_bmc',
       'transformed_variable': 'courts[0].division_bmc',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'court_division_district_court',
       'transformed_variable': 'courts[0].division_district_court',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'court_division_juvenile_court',
       'transformed_variable': 'courts[0].division_juvenile_court',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'court_division_family_court',
       'transformed_variable': 'courts[0].division_family_court',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'court_division_superior_court',
       'transformed_variable': 'courts[0].division_superior_court',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child1_name_last_first',
       'transformed_variable': 'children[1-1].name_last_first',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child2_name_last_first',
       'transformed_variable': 'children[2-1].name_last_first',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child3_name_last_first',
       'transformed_variable': 'children[3-1].name_last_first',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'confidential_address',
       'transformed_variable': 'confidential_address',
      'field_type': 'yesno',
      },
      {'variable': 'child1_past_addresses_on_one_line',
       'transformed_variable': 'children[1-1].past_addresses_on_one_line',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child2_past_addresses_on_one_line',
       'transformed_variable': 'children[2-1].past_addresses_on_one_line',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child3_past__addresses_on_one_line',
       'transformed_variable': 'children[3-1].past_ addresses_on_one_line',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'has_participated_custody_case',
       'transformed_variable': 'has_participated_custody_case',
      'field_type': 'yesno',
      },
      {'variable': 'has_not_participated_custody_case',
       'transformed_variable': 'has_not_participated_custody_case',
      'field_type': 'yesno',
      },
      {'variable': 'know_of_other_custody_case',
       'transformed_variable': 'know_of_other_custody_case',
      'field_type': 'yesno',
      },
      {'variable': 'do_not_know_of_other_custody_case',
       'transformed_variable': 'do_not_know_of_other_custody_case',
      'field_type': 'yesno',
      },
      {'variable': 'other_case_3_user_role',
       'transformed_variable': 'users[0].role_in_custody_case_child1',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_1_letters',
       'transformed_variable': 'children[1-1].letter_a',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_1_court',
       'transformed_variable': 'children[1-1].custody_court_name',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_1_docket',
       'transformed_variable': 'children[1-1].custody_docket_number',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_1_status',
       'transformed_variable': 'children[1-1].custody_case_status',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_2_user_role',
       'transformed_variable': 'users[0].role_in_custody_case_child2',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_2_letters',
       'transformed_variable': 'children[2-1].letter_b',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_2_court',
       'transformed_variable': 'children[2-1].custody_court_name',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_2_docket',
       'transformed_variable': 'children[2-1].custody_docket_number',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_2_status',
       'transformed_variable': 'children[2-1].custody_case_status',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_3_user_role',
       'transformed_variable': 'users[0].role_in_custody_case_child3',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_3_letters',
       'transformed_variable': 'children[3-1].letter_c',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_3_court',
       'transformed_variable': 'children[3-1].custody_court_name',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_3_docket',
       'transformed_variable': 'children[3-1].custody_docket_number',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_3_status',
       'transformed_variable': 'children[3-1].custody_case_status',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_1_letters',
       'transformed_variable': 'children[1-1].letter_a',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_1_names',
       'transformed_variable': 'other_parties[0].name_full_child1',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_1_address_on_one_line',
       'transformed_variable': 'other_parties[0].address_on_one_line_child1',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_2_letters',
       'transformed_variable': 'children[2-1].letter_b',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_2_names',
       'transformed_variable': 'other_parties[0].name_full_child2',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_2_address_on_one_line',
       'transformed_variable': 'other_parties[0].address_on_one_line_child2',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_3_names',
       'transformed_variable': 'other_parties[0].name_full_child3',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_other_parties_3_address_on_one_line',
       'transformed_variable': 'other_parties[0].address_on_one_line_child3',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'other_case_3_letters__1',
       'transformed_variable': 'children[3-1].letter_c',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'impound_affidavit',
       'transformed_variable': 'impound_affidavit',
      'field_type': 'yesno',
      },
      {'variable': 'day',
       'transformed_variable': 'day',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'month',
       'transformed_variable': 'month',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'year',
       'transformed_variable': 'year',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_of_record_address_on_one_line',
       'transformed_variable': 'attorney_of_record_address_on_one_line',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child1_past_addresses_street',
       'transformed_variable': 'children[1-1].past_addresses_street',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child1_past_addresses_city_state_zip',
       'transformed_variable': 'children[1-1].past_addresses_city_state_zip',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child2_past_addresses_street',
       'transformed_variable': 'children[2-1].past_addresses_street',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child2_past_addresses_city_state_zip',
       'transformed_variable': 'children[2-1].past_addresses_city_state_zip',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child3_past_addresses_street',
       'transformed_variable': 'children[3-1].past_addresses_street',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'child3_past_addresses_city_state_zip',
       'transformed_variable': 'children[3-1].past_addresses_city_state_zip',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_children_or_child1__1',
       'transformed_variable': 'attorneys[0].for_children_or_child1',
      'field_type': 'yesno',
      },
      {'variable': 'attorney_for_children_or_child1__2',
       'transformed_variable': 'attorneys[0].for_children_or_child1',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_child2_if_different',
       'transformed_variable': 'attorneys[0].for_child2_if_different',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_child2',
       'transformed_variable': 'attorneys[0].for_child2',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_child3_if_different',
       'transformed_variable': 'attorneys[0].for_child3_if_different',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_child3',
       'transformed_variable': 'attorneys[0].for_child3',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'gal_investigator1',
       'transformed_variable': 'gal_investigator1',
      'field_type': 'yesno',
      },
      {'variable': 'gal_for_child1',
       'transformed_variable': 'gal_for_child1',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'gal_investigator2_if_different',
       'transformed_variable': 'gal_investigator2_if_different',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'gal_for_child2',
       'transformed_variable': 'gal_for_child2',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'gal_investigator3_if_different',
       'transformed_variable': 'gal_investigator3_if_different',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'gal_for_child3',
       'transformed_variable': 'gal_for_child3',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_mother_name_full__1',
       'transformed_variable': 'attorneys[0].for_mother_name_full',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney1_for_mother',
       'transformed_variable': 'attorneys[1-1].for_mother',
      'field_type': 'yesno',
      },
      {'variable': 'attorney2_for_mother',
       'transformed_variable': 'attorneys[2-1].for_mother',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_mother_name_full__2',
       'transformed_variable': 'attorneys[0].for_mother_name_full',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_father_name_full',
       'transformed_variable': 'attorneys[0].for_father_name_full',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      {'variable': 'attorney_for_father',
       'transformed_variable': 'attorneys[0].for_father',
      'field_type': 'yesno',
      },
      {'variable': 'attorney_for_dfc_name_full',
       'transformed_variable': 'attorneys[0].for_dfc_name_full',
      'field_type': 'text',
      'field_data_type': 'text',
      },
      ],
  })
---
question: |
  Confidential Address
subquestion: |
  Do you need your address to be kept secret for any of the following reasons?
fields:
  - Check any that are true: confidential_address_reasons
    datatype: checkboxes
    choices:
      - This is a 209A (abuse prevention) order
      - I live in a domestic violence shelter
      - I am in danger of abuse
      - My children are in danger of abuse
      - It should be kept secret for another reason not listed above
---
code: |
  # This checks box 3 on the form
  confidential_address = confidential_address_reasons.any_true()
---
# This should show the address of the plaintiff and each kid, but
# Only if they are unique
question: |
  Where does ${children[i]} live?
fields:
  - An address already mentioned: children[i].address
    datatype: object
    choices: 
      - collected_addresses
      - users[0].address
    object labeler: |
      lambda y: y.on_one_line()
    disable others: True
  - Street address: children[i].address.address
    address autocomplete: True
  - Apartment: children[i].address.unit
    required: False
  - City: children[i].address.city
  - State: children[i].address.state
    code: |
      states_list()
    default: MA
    show if: 
      variable: children[i].address.country
      is: USA
  - Province/State: children[i].address.state
    hide if: 
      variable: children[i].address.country
      is: USA
  - Country: children[i].address.country
    default: USA
      
---
code: |
  # Ask the user if they want the affidavit impounded ONLY if they have an
  # adoption case listed on the form. Otherwise not relevant
  impound_affidavit = False if not other_care_custody_proceedings.includes_adoption() else ask_impound_affidavit
---
question: |
  Privacy of adoption records
subquestion: |
  You said that one of the cases mentioning ${comma_and_list(children_of_both,and_string=word("or"))} is an adoption.
  
  You have the right to tell the court to keep this form private so the
  adoption is not a public record.
  
  Would you like to keep this form private?
yesno: ask_impound_affidavit
---
generic object: OtherProceeding
question: |
  Attorneys, Guardians ad Litem, and Investigators
subquestion: |
  The court asks you to name the people involved in any case that is
  still "pending", or not yet decided by a judge or agreement.

  Were there any attorneys, guardians ad litem, or investigators
  involved in this case?
yesno: x.attorneys.there_are_any
# ---
# generic object: OtherProceeding
# question: |
#   Attorneys, Guardians ad Litem, and Investigators
# subquestion: |  
#   Please list the names of each attorney, guardian ad litem, and investigator
#   who is involved in the "${x}" case.
# list collect: True
# fields:
# # An attorney already mentioned
#   - Name: x.attorneys[i].name.first
#   - Role in this case: x.attorneys[i].role
#     choices:
#       - Attorney: attorney
#       - Guardian ad Litem: GAL
#       - Investigator: investigator
#   - Did this person represent your child, or an adult?: x.attorneys[i].represented_child_or_adult
    
#   - Who does this person represent?: x.attorneys[i].represented_parties
#     datatype: checkboxes
#     code: |
#       children + users + other_parties
#     minlength: 1      
---
code: |
  day = ordinal_number(int(signature_date.format('dd')), use_word=False) # https://docassemble.org/docs/functions.html#ordinal_number
  month = signature_date.format('MMMM')
  year = signature_date.format('yy')
---
question: |
  Docket Number
subquestion: |
  If you know the docket number for this case, enter it below
fields:
  - I do not know the docket number: dont_know_docket_number
    datatype: yesno
  - Docket number: docket_numbers[0]
    hide if:  dont_know_docket_number
validation code: |
  # docket_numbers.there_are_any = not dont_know_docket_number
  if dont_know_docket_number:
    docket_numbers[0] = ' '
  docket_numbers.there_is_another = False
---
code: |
  docket_numbers.there_are_any = False
---
question: |
  Attorney Signature
subquestion: |
  Are you completing this form on behalf of yourself or as an attorney
  for someone who is a juvenile (under 18) or incompetent?
field: needs_attorney_signature
buttons:
  - Myself: False
  - As an attorney: True
---
question: |
  What is the address of the attorney signing this form?
fields:
  - Street: signing_attorney.address.address
    address autocomplete: True
  - Unit: signing_attorney.address.unit
    required: False
  - City: signing_attorney.address.city
  - State: signing_attorney.address.state
    code: |
      states_list()
  - Zip: signing_attorney.address.zip
#---
#question: |
#  Date
#subquestion: |
#  What's today's date
#fields:
#  - 'Day': day
#  - 'Month': month
#  - 'Year': year
---
question: |
  Prior Custody Cases
subquestion: |
  Have you ever been part of a custody or other case about the children, 
  as either a witness or a party?
  
  "Other case" includes any custody case, divorce, child support, paternity
  case, visitation case, adoption, juvenile delinquency, DCF case involving
  care and protection. If you're not sure, it's safer to answer yes.
  
  We'll ask you more about any cases in the next few questions.
fields:
# TODO: We need to change the list of children to OR instead of AND
  - 'I have been part of another case involving ${comma_and_list(children_of_both, and_string=word("or"))}': has_participated_custody_case_yes
    datatype: yesnowide
  - 'I was not part of any other case, but I know about another case involving ${children_of_both}': know_of_other_custody_case_yes
    datatype: yesnowide
    show if:
      variable: has_participated_custody_case_yes
      is: False
---
code: |
  has_participated_custody_case = has_participated_custody_case_yes
  has_not_participated_custody_case = not has_participated_custody_case_yes
  if has_participated_custody_case_yes:
    know_of_other_custody_case_yes = True
  know_of_other_custody_case = know_of_other_custody_case_yes
  do_not_know_of_other_custody_case = not know_of_other_custody_case_yes
---
code: |
  other_care_custody_proceedings.there_are_any = has_participated_custody_case_yes or know_of_other_custody_case_yes
---
comment: |
  Build an AJAX input that lists all of the trial court departments, excluding housing
event: list_family_courts_ajax
code: |
  set_save_status('ignore')
  wordstart = action_argument('wordstart').lower()
  results = []
  for court in macourts.filter_courts([
      'Boston Municipal Court',
      'District Court',
      'Juvenile Court',
      'Probate and Family Court',
      'Superior Court',
    ]):
    for word in court.name.split(" "):
      if word.lower().startswith(wordstart):
        results.append(court.name)
  json_response(results)
---
need: DCF
question: |
  Tell us about the ${ordinal(i)} case involving ${comma_and_list(children_of_both, and_string=word("or"))}
subquestion: |
  Include the best information you know. It is okay to leave information blank
  if you're not sure, or to write down what you remember.

  Only include information about cases that involve the children.

  You will have a chance to add more cases later.
fields:  
  - What is the best description of this case (you do not need to be exact): other_care_custody_proceedings[i].case_status
    choices:
      - A different 209A restraining order: different 209A restraining order
      - Adoption: adoption
      - Annulment: annulment
      - Care and protection: care and protection
      - Child Requiring Assistance (CRA): CRA
      - Custody/Support/Parenting time: custody/support/parenting time
      - Custody/Support/Visitation: custody/support/visitation
      - Complaint to establish paternity: paternity
      - Divorce: divorce
      - Guardianship: guardianship
      - Separate support or other legal separation: separate support or legal separation
      - Other: other
  - This case happened outside of Massachusetts: other_care_custody_proceedings[i].non_ma_court
    datatype: yesno    
  - Name of court this case was filed in: other_care_custody_proceedings[i].court_name
    show if: other_care_custody_proceedings[i].non_ma_court
  - Name of court this case was filed in:  other_care_custody_proceedings[i].court_name
    hint: Start typing a court name
    input type: ajax
    action: list_family_courts_ajax
    trigger at: 2
    hide if: other_care_custody_proceedings[i].non_ma_court
    help: |
      If you can't find your court above, try using the [Courthouse locator](https://www.mass.gov/courthouse-locator)
  - Docket number or case number: other_care_custody_proceedings[i].docket_number
    required: False
  - Which children were involved in this case?: other_care_custody_proceedings[i].children
    datatype: object_checkboxes
    choices: |
      children_of_both
    none of the above: False
    minlength: 1
    show if:
      code: |
        len(children_of_both) > 1
  - What was your role in this case?: other_care_custody_proceedings[i].user_role
    datatype: radio
    choices:
      - Witness: W
      - Party: P
      - Other: O
      - I was not involved: N
    default: ${'N' if not has_participated_custody_case_yes else ''}
    hide if: 
      variable: other_care_custody_proceedings[i].case_status
      is: adoption
  - Who else was part of this case?: other_care_custody_proceedings[i].other_party_types
    datatype: checkboxes
    choices:
      - ${other_parties.familiar()}: defendant
      - Department of Children and Families: dcf
      - Someone else (like a grandparent): other
  - Is this case still open?: other_care_custody_proceedings[i].is_open
    datatype: yesnoradio
    help: |
      Answer "yes" if the case is still ongoing. Choose no if a judge made a final decision,
      even if you or another person plans to appeal to it.
  - Was custody awarded?: other_care_custody_proceedings[i].custody_awarded
    js hide if: |
      val("other_care_custody_proceedings[i].case_status") == "adoption"
    datatype: yesnoradio      
  - Who was given custody?: other_care_custody_proceedings[i].person_given_custody
    js show if: |
      !(val("other_care_custody_proceedings[i].case_status") == "adoption") && val("other_care_custody_proceedings[i].custody_awarded")
  - Date custody was given: other_care_custody_proceedings[i].date_of_custody
    datatype: date
    js show if: |
      !(val("other_care_custody_proceedings[i].case_status") == "adoption")  && val("other_care_custody_proceedings[i].custody_awarded")
validation code: |
  # We don't ask the user to select which child is in the case if
  # there is only one child. Below code adds the child to the appropriate
  # list so we can write more general code.
  if len(children_of_both) == 1:
    other_care_custody_proceedings[i].children = children_of_both
  
  # Prepopulate the list of other parties involved in this case
  if other_care_custody_proceedings[i].other_party_types.any_true():
    other_care_custody_proceedings[i].other_parties.clear()
    if other_care_custody_proceedings[i].other_party_types["defendant"]:
      other_care_custody_proceedings[i].other_parties.there_are_any=True
      other_care_custody_proceedings[i].other_parties.append(other_parties[0])
    if other_care_custody_proceedings[i].other_party_types["dcf"]:
      other_care_custody_proceedings[i].other_parties.there_are_any=True      
      other_care_custody_proceedings[i].other_parties.append(DCF)
    if other_care_custody_proceedings[i].other_party_types["other"]:
      if len(other_care_custody_proceedings[i].other_parties.elements):  
        other_care_custody_proceedings[i].other_parties.there_are_any=True
        other_care_custody_proceedings[i].other_parties.there_is_another = True
    else:
      if other_care_custody_proceedings[i].other_party_types["defendant"]:
        other_care_custody_proceedings[i].other_parties.there_are_any=True
        other_care_custody_proceedings[i].other_parties.append(other_parties[0])
        # Assign a child letter to other_parties if they were part of this case
        if hasattr(other_parties[0],'child_letters') and other_parties[0].child_letters:
          other_parties[0].child_letters = other_parties[0].child_letters + other_care_custody_proceedings[i].child_letters()
        else:
          other_parties[0].child_letters = other_care_custody_proceedings[i].child_letters()
      if other_care_custody_proceedings[i].other_party_types["dcf"]:
        other_care_custody_proceedings[i].other_parties.there_are_any=True
        other_care_custody_proceedings[i].other_parties.append(DCF)
      other_care_custody_proceedings[i].other_parties.auto_gather=False
      other_care_custody_proceedings[i].other_parties.gathered=True
  else:
    other_care_custody_proceedings[i].other_parties.there_are_any=False
    
# ---
# question: |
#   Who else was involved in this case?
# subquestion: |
#   For the ${ordinal(i)} case, ${other_care_custody_proceedings[i]}:
#   Is there anyone _other than_ you or ${other_parties.familiar()} who 
#   was a party to this case? For example, a grandparent or other parent of the child.
# yesno: other_care_custody_proceedings[i].other_parties.there_are_any
---
question: |
  Who else was involved in this case?
subquestion: |
  % if len(other_care_custody_proceedings[i].other_parties.complete_elements()):
  You have already told us about ${comma_and_list(other_care_custody_proceedings[i].other_parties.complete_elements())}
  % endif
# list collect: 
#   enable: True
#   label: |
#     **${ordinal(j).capitalize()}** additional party
fields:
  - A person already mentioned: other_care_custody_proceedings[i].other_parties[j]
    datatype: object
    choices: others_in_proceedings
    disable others: True
  - Name: other_care_custody_proceedings[i].other_parties[j].name.first
  - Address: other_care_custody_proceedings[i].other_parties[j].address_for_form
    address autocomplete: True
    required: False
validation code: |
  other_care_custody_proceedings[i].other_parties[j].address.geolocate(other_care_custody_proceedings[i].other_parties[j].address_for_form)
  if not other_care_custody_proceedings[i].other_parties[j].address.geolocated:
    other_care_custody_proceedings[i].other_parties[j].address = DAEmpty()
  # for person in other_care_custody_proceedings[i].other_parties:
  #   person.address.geolocate(person.address_for_form)
  #   if not person.address.geolocated:
  #     person.address = DAEmpty()
---
question: |
  Was there anyone else involved in this case?
subquestion: |
  % if len(other_care_custody_proceedings[i].other_parties.complete_elements()):
  You have already told us about ${comma_and_list(other_care_custody_proceedings[i].other_parties.complete_elements())}
  % endif
yesno: other_care_custody_proceedings[i].other_parties.there_is_another
---
# TODO: this way of uniquely gathering the parties is not the best
# approach. May be smarter to make a method on PeopleList
# or make a new class that subclasses PeopleList with a
# unique_people method.
# Also need to re-think the "child_letters" being an attribute
# of the person, rather than collecting the unique child letters
# at the time we build the list.
reconsider: True
comment: |
  This builds our list of parties involved in other care/custody proceedings
  for box8. It's also reconsidered on each page load so we can pick from people 
  who were on previous cases on new screens.
code: |
  # It's possible this should be optimized, but I think not unless we had hundreds of cases
  # Start with a set to avoid duplicates
  gathering_temp = set()
  # use .elements to avoid forcing list to be gathered before we work with it here  
  for case in other_care_custody_proceedings.elements:
    if case.other_parties.there_are_any:
      for other_party in case.other_parties.complete_elements():
        gathering_temp.add(other_party)
  others_in_proceedings.elements = list(gathering_temp) # I think we need to convert back to a list
  others_in_proceedings.gathered=True
  del gathering_temp
---
code: |
  other_care_custody_proceedings[i].other_parties[j].child_letters = other_care_custody_proceedings[i].child_letters()
---
if: len(other_care_custody_proceedings[i].children) == 1
question: |
  Lawyers in ${ordinal(i)} case
subquestion: |
  The court wants to know about people who worked 
  with you, ${other_parties.familiar()}, or ${children_of_both} 
  for any open cases.

  Who has a lawyer on this case?
fields:
  - You?: other_care_custody_proceedings[i].atty_for_user
    datatype: yesnoradio
  - Name of your lawyer: other_care_custody_proceedings[i].atty_for_user_name
    show if: other_care_custody_proceedings[i].atty_for_user
  - ${other_parties.familiar()}?: other_care_custody_proceedings[i].atty_for_defendant
    datatype: yesnoradio
  - Name of ${other_parties.familiar()}'s lawyer: other_care_custody_proceedings[i].atty_for_defendant_name
    show if: other_care_custody_proceedings[i].atty_for_defendant
  - ${comma_and_list(other_care_custody_proceedings[i].children,and_string=word("or"))}?: other_care_custody_proceedings[i].atty_for_children
    datatype: yesnoradio
  - Name of ${other_care_custody_proceedings[i].children}'s lawyer: other_care_custody_proceedings[i].atty_for_children_name
    show if: other_care_custody_proceedings[i].atty_for_children
---
if: len(other_care_custody_proceedings[i].children) > 1
question: |
  Information about lawyers
subquestion: |
  The court wants to know about people who worked 
  with you, ${other_parties.familiar()}, or ${children_of_both} 
  in the ${other_care_custody_proceedings[i]}.

  % if i > 1:
  You don't need to tell us about the same lawyer twice,
  if you mentioned this lawyer for a different case.
  % endif

  Who has or had a lawyer on this case?
fields:
  - You?: other_care_custody_proceedings[i].atty_for_user
    datatype: yesnoradio
  # - Name of your lawyer (if already mentioned): other_care_custody_proceedings[i].atty_for_user_name
  #   datatype: object
  #   choices: attorneys_for_parents
  #   show if: other_care_custody_proceedings[i].atty_for_user
  #   disable others:
  #     - other_care_custody_proceedings[i].atty_for_user_name
  - Name of your lawyer: other_care_custody_proceedings[i].atty_for_user_name
    show if: other_care_custody_proceedings[i].atty_for_user
  - ${other_parties.familiar()}?: other_care_custody_proceedings[i].atty_for_defendant
    datatype: yesnoradio
  # - Name of ${other_parties.familiar()}'s lawyer (if already mentioned): other_care_custody_proceedings[i].atty_for_defendant_name
  #   datatype: object
  #   choices: attorneys_for_parents
  #   show if: other_care_custody_proceedings[i].atty_for_defendant   
  #   disable others:
  #     - other_care_custody_proceedings[i].atty_for_defendant_name
  - Name of ${other_parties.familiar()}'s lawyer: other_care_custody_proceedings[i].atty_for_defendant_name
    show if: other_care_custody_proceedings[i].atty_for_defendant
  - ${comma_and_list(other_care_custody_proceedings[i].children,and_string=word("or"))}?: other_care_custody_proceedings[i].atty_for_children
    datatype: yesnoradio
  - note: |
      OK, we will ask for the names of each child's lawyer on the next screen.
    show if: other_care_custody_proceedings[i].atty_for_children
validation code: |
  for case in other_care_custody_proceedings:
    if case.atty_for_children:
      case.attorneys_for_children.there_are_any=True
---
question: |
  Lawyers for children in your ${other_care_custody_proceedings[i]}?
subquestion: |
  List one lawyer at a time. If you need to add more than one lawyer
  for your children on this case, click ${word("Add another")}.
list collect: True
fields:
  - Name of lawyer: other_care_custody_proceedings[i].attorneys_for_children[j].name.first
  - Which children did this lawyer represent?: other_care_custody_proceedings[i].attorneys_for_children[j].represented_children
    datatype: object_checkboxes
    choices: other_care_custody_proceedings[i].children
    none of the above: False
# ---
# This does not work because of an intrinsic name issue. I think workaround is acceptable
# question: |
#   Who represented your child, ${other_care_custody_proceedings[i].children[j]} in this case?
# fields:
#   - ${other_care_custody_proceedings[i].children[j]} did not have a lawyer: other_care_custody_proceedings[i].children[j].represented
#     datatype: noyes
#     disable others: True
#   - Name: other_care_custody_proceedings[i].children[j].attorney
---
question: |
  Information about Guardians ad Litem (GALs)
subquestion: |
  Did the judge appoint a GAL or investigator on this case?
fields:
  - no label: other_care_custody_proceedings[i].has_gal
    datatype: yesnoradio
  - How many did they appoint?: other_care_custody_proceedings[i].gals.target_number
    datatype: integer
    min: 1
    show if: other_care_custody_proceedings[i].has_gal
---
question: |
  Information about the ${ordinal(j)} guardian ad litem or investigator for your ${other_care_custody_proceedings[i].case_status} case
fields:
  - Name: other_care_custody_proceedings[i].gals[j].name.first
  - Did this GAL or investigator work with ALL children?: other_care_custody_proceedings[i].gals[j].represented_all_children
    datatype: yesnoradio
  - Which children did this GAL or investigator work with?: other_care_custody_proceedings[i].gals[j].represented_children
    datatype: object_checkboxes
    choices: children_of_both
    show if:
      variable: other_care_custody_proceedings[i].gals[j].represented_all_children
      is: False
---
question: |
  Attorneys involved in your children's cases
subquestion: |
  It sounds like some of the cases you mentioned are still ongoing.

  You told us about the following pending cases so far:

  ${other_care_custody_proceedings.table}

  In the next question, we will ask you about the names of attorneys, guardians
  ad litem, and investigators who were involved in each case.
continue button field: explain_why_asking_about_attorneys
---
# TODO:
# We need to add some templates here to let the status
# be translated
table: other_care_custody_proceedings.table
rows: other_care_custody_proceedings.filter(is_open=True)
columns:
  - Case type: |
      row_item.case_status
  - Court: |
      row_item.court_name
  - Docket: |
      showifdef('row_item.docket_number')
  - Children: |
      row_item.children
---
question: |
  Are there any other cases you would like to tell us about?
subquestion: |
  So far you have told us about ${quantity_noun(len(other_care_custody_proceedings.elements), word("case"))}: 
  ${comma_and_list(other_care_custody_proceedings.elements)}
yesno: other_care_custody_proceedings.there_is_another
---
reconsider: True
code: |
  # Build the lists of attorneys for parents
  attorneys_for_parents.clear()
  for case in other_care_custody_proceedings.complete_elements():
    # If they selected an attorney and the attorney is a new one 
    # (e.g., a string rather than an Individual)
    if case.atty_for_user and hasattr(case, 'atty_for_user_name'):
      atty = attorneys_for_parents.appendObject()
      atty.name.first = case.atty_for_user_name
      atty.represented_party = users
    if case.atty_for_defendant and hasattr(case, 'atty_for_defendant_name'):
      atty = attorneys_for_parents.appendObject()
      atty.name.first = case.atty_for_defendant_name                
      atty.represented_party = other_parties
  attorneys_for_parents.gathered = True
---
reconsider: True
code: |
  # Build the list of attorneys for children
  attorneys_for_children.clear()
  for case in other_care_custody_proceedings.complete_elements():
    if case.atty_for_children:
      if len(case.children) == 1:
        atty = attorneys_for_children.appendObject()
        atty.name.first = case.atty_for_children_name
        atty.represented_children = case.children
      else:
        attorneys_for_children.extend(case.attorneys_for_children)
  attorneys_for_children.gathered=True
---
code: |
  gals_investigators = other_care_custody_proceedings.get_gals('gals_investigators')
---
code: |
  # Assign each child a letter from A..Z, or even AA..AZ, etc.
  # for someone with more than 26 children
  for index, child in enumerate(children_of_both):
    child.letter = number_to_letter(index+1)
  assigned_letters = True    
---
code: |
  need_past_address_appendix_temp = False
  for child in children_of_both:
    if len(child.previous_addresses) > 2:
      need_past_address_appendix_temp = True
      child.previous_addresses.put_on_appendix = True
    else:
      child.previous_addresses.put_on_appendix = False
  need_past_address_appendix = need_past_address_appendix_temp
---
code: |
  need_children_appendix_temp = False 
  if len(children_of_both) > 3:
    need_children_appendix_temp = True
  need_children_appendix = need_children_appendix_temp
---
code: |
  need_other_parties_appendix_temp = False
  for proceeding in other_care_custody_proceedings:
    if len(proceeding.other_parties) > 3:
      need_other_parties_appendix_temp = True
      proceeding.put_on_appendix = True
  need_other_parties_appendix = need_other_parties_appendix_temp
---
code: |
  # Remove duplicates from list of box8 people

  # avoid idempotency problems
  for person in others_in_proceedings:
    str(person)
    str(person.child_letters ) # Should be a list of strings

  names = set() # Potential issue: 2 box8 people with the same name that are different and were part of different cases. Not worth solving yet
  for index, person in enumerate(others_in_proceedings):
    if str(person) in names: # checking for unique person based on unique names
      for p_level2 in others_in_proceedings:
        if str(person) == str(p_level2): 
          p_level2.child_letters = filter_letters([person.child_letters, p_level2.child_letters]) # these get filtered later for the form.
      others_in_proceedings.pop(index) # remove the duplicate person
    names.add(str(person)) # This is a set so adding won't cause a duplicate
  
  removed_other_people_duplicates = True
---
progress: 100
# mandatory: True
question: |
  Placeholder download screen
subquestion: |
  Placeholder
  
  ### Next steps
  
  1. Step 1
  1. Step 2
  
  Below is a preview of your form.
  
  ${A_affidavit_disclosing_care_or_custody_proceedings0009_attachment }
  % if (need_children_appendix or need_other_parties_appendix or need_past_address_appendix):
  ${care_or_custody_proceedings_appendix_variable }
  % endif
attachment code: A_affidavit_disclosing_care_or_custody_proceedings0009_attachment
---
need: need_other_parties_appendix
attachment:
  variable name: care_or_custody_proceedings_appendix_variable
  name: Affidavit Disclosing Care or Custody Proceedings Appendix
  filename: Affidavit_Disclosing_Care_or_Custody_Appendix
  docx template file: care_or_custody_proceedings_appendix.docx
---
need: A_affidavit_disclosing_care_or_custody_proceedings0009
attachment:
    variable name: A_affidavit_disclosing_care_or_custody_proceedings0009_attachment
    name: Affidavit of Care
    filename: Affidavit_of_Care
    editable: False  
    pdf template file: 209A_affidavit_disclosing_care_or_custody_proceedings_remarked.pdf
    fields: 
      - "docket_number": ${ docket_numbers[0] }
      - "user_name_full": ${ str(users[0]) }
      - "child1_address_on_one_line": ${ children_of_both.item(0).address.on_one_line(include_unit=True) if not confidential_address else ''}
      - "child2_address_on_one_line": ${ children_of_both.item(1).address.on_one_line(include_unit=True)  if not confidential_address else ''}
      - "child3_address_on_one_line": ${ children_of_both.item(2).address.on_one_line(include_unit=True)  if not confidential_address else ''}
      - "user_address_on_one_line": ${ users[0].address.on_one_line(include_unit=True)  if not confidential_address else ''}
      - "user_name_full__1": ${ str(users[0]) }
      - "child1_address_street": ${ children_of_both.item(0).address.line_one() }
      - "child1_address_city_state_zip": ${ children_of_both.item(0).address.line_two() }
      - "child2_address_street": ${ children_of_both.item(1).address.line_one() }
      - "child2_address_city_state_zip": ${ children_of_both.item(1).address.line_two() }
      - "child3_address_street": ${ children_of_both.item(2).address.line_one() }
      - "child3_address_city_state_zip": ${ children_of_both.item(2).address.line_two() }
      - "user_address_on_one_line__2": ${ users[0].address.on_one_line(include_unit=True) }
      - "case_name": ${ case_name }
      - "court_division_bmc": ${ showifdef('courts[0].division_bmc') }
      - "court_division_district_court": ${ showifdef('courts[0].division_district_court') }
      - "court_division_juvenile_court": ${ showifdef('courts[0].division_juvenile_court') }
      - "court_division_family_court": ${ showifdef('courts[0].division_family_court') }
      - "court_division_superior_court": ${ showifdef('courts[0].division_superior_court') }
      - "child1_name_last_first": ${ children_of_both.item(0).name.lastfirst() }
      - "child2_name_last_first": ${ children_of_both.item(1).name.lastfirst() }
      - "child3_name_last_first": ${ children_of_both.item(2).name.lastfirst() }
      - "confidential_address": ${ confidential_address }
      - "child1_past_addresses_on_one_line": ${ children_of_both.item(0).past_addresses_on_one_line if not confidential_address else '' } 
      - "child2_past_addresses_on_one_line": ${ children_of_both.item(1).past_addresses_on_one_line if not confidential_address else '' }
      - "child3_past_addresses_on_one_line": ${ children_of_both.item(2).past_addresses_on_one_line if not confidential_address else '' }
      - "has_participated_custody_case": ${ has_participated_custody_case }
      - "has_not_participated_custody_case": ${ not has_participated_custody_case }
      - "know_of_other_custody_case": ${ know_of_other_custody_case }
      - "do_not_know_of_other_custody_case": ${ not know_of_other_custody_case }
      - "other_case_1_user_role": ${other_care_custody_proceedings.item(0).user_role }
      - "other_case_1_letters": ${ other_care_custody_proceedings.item(0).child_letters() }
      - "other_case_1_court": ${ other_care_custody_proceedings.item(0).court_name }
      - "other_case_1_docket": ${ other_care_custody_proceedings.item(0).docket_number }
      - "other_case_1_status": ${ other_care_custody_proceedings.item(0).status() }
      - "other_case_2_user_role": ${ other_care_custody_proceedings.item(1).user_role }
      - "other_case_2_letters": ${ other_care_custody_proceedings.item(1).child_letters() }
      - "other_case_2_court": ${ other_care_custody_proceedings.item(1).court_name }
      - "other_case_2_docket": ${ other_care_custody_proceedings.item(1).docket_number }
      - "other_case_2_status": ${ other_care_custody_proceedings.item(1).status() }
      - "other_case_3_user_role": ${ other_care_custody_proceedings.item(2).user_role }
      - "other_case_3_letters": ${ other_care_custody_proceedings.item(2).child_letters()}
      - "other_case_3_court": ${ other_care_custody_proceedings.item(2).court_name }
      - "other_case_3_docket": ${ other_care_custody_proceedings.item(2).docket_number }
      - "other_case_3_status": ${ other_care_custody_proceedings.item(2).status() }
      - "other_case_other_parties_1_letters": ${ filter_letters(others_in_proceedings.item(0).child_letters) }
      - "other_case_other_parties_1_names": ${ others_in_proceedings.item(0) }
      - "other_case_other_parties_1_address_on_one_line": ${ others_in_proceedings.item(0).address.on_one_line(include_unit=True) }
      - "other_case_other_parties_2_letters": ${ filter_letters(others_in_proceedings.item(1).child_letters) }
      - "other_case_other_parties_2_names": ${ others_in_proceedings.item(1) }
      - "other_case_other_parties_2_address_on_one_line": ${ others_in_proceedings.item(1).address.on_one_line(include_unit=True) }
      - "other_case_other_parties_3_names": ${ others_in_proceedings.item(2) }
      - "other_case_other_parties_3_address_on_one_line": ${ others_in_proceedings.item(2).address.on_one_line(include_unit=True) }
      - "other_case_other_parties_3_letters": ${ filter_letters(others_in_proceedings.item(2).child_letters) }
      - "impound_affidavit": ${ impound_affidavit }
      - "day": ${ day }
      - "month": ${ month }
      - "year": ${ year }
      - "attorney_for_juvenile_address_on_one_line": ${ signing_attorney.address.on_one_line(include_unit=True) if needs_attorney_signature else '' }
      - "child1_past_addresses_1": ${ children_of_both.item(0).previous_addresses.item(0).on_one_line() if confidential_address else '' }
      - "child1_past_addresses_2": ${ children_of_both.item(0).previous_addresses.item(1).on_one_line() if confidential_address else '' }
      - "child2_past_addresses_1": ${ children_of_both.item(1).previous_addresses.item(0).on_one_line() if confidential_address else '' }
      - "child2_past_addresses_2": ${ children_of_both.item(1).previous_addresses.item(1).on_one_line() if confidential_address else '' }
      - "child3_past_addresses_1": ${ children_of_both.item(2).previous_addresses.item(0).on_one_line() if confidential_address else '' }
      - "child3_past_addresses_2": ${ children_of_both.item(2).previous_addresses.item(1).on_one_line() if confidential_address else '' }
      - "attorney_for_children_1": ${ str(attorneys_for_children.item(0)) +  ' (' + str(attorneys_for_children.item(0).represented_children) + ')' if defined('attorneys_for_children[0]') else ''}
      - "attorney_for_children_2": ${ str(attorneys_for_children.item(1)) +  ' (' + str(attorneys_for_children.item(1).represented_children) + ')' if defined('attorneys_for_children[1]') else ''}
      - "attorney_for_children_3": ${ str(attorneys_for_children.item(2)) +  ' (' + str(attorneys_for_children.item(2).represented_children) + ')' if defined('attorneys_for_children[2]') else ''}
      - "gals_investigators_1": ${ gals_investigators.item(0).status()}
      - "gals_investigators_2": ${ gals_investigators.item(1).status()}
      - "gals_investigators_3": ${ gals_investigators.item(2).status()}
      - "attorneys_for_parents_1": ${ str(attorneys_for_parents.item(0)) + ' (' + str(attorneys_for_parents.item(0).represented_party) + ')' if defined('attorneys_for_parents[0]') else ''}
      - "attorneys_for_parents_2": ${ str(attorneys_for_parents.item(1)) +  ' (' + str(attorneys_for_parents.item(1).represented_party) + ')' if defined('attorneys_for_parents[1]') else ''}
      - "attorneys_for_parents_3": ${ str(attorneys_for_parents.item(2)) + ' (' + str(attorneys_for_parents.item(2).represented_party) + ')' if defined('attorneys_for_parents[2]') else ''}
      - "user_signature": ${ users[0].signature }
---
comment: |
  This question is used to introduce your interview. Please customize
continue button field: A_affidavit_disclosing_care_or_custody_proceedings0009_intro
question: |
  Affidavit Disclosing Care or Custody Proceedings
subquestion: |
  If your children have been involved in court cases about their custody or care, 
  then you must submit an Affidavit Disclosing Care or Custody Proceeding. 
  The main purpose of this form is to find out about any open or closed cases 
  related to the care and/or custody of your children. This helps the court get a 
  better picture of your childrens’ situations.
---
continue button field: A_affidavit_disclosing_care_or_custody_proceedings0009_preview_question
question: |
  Placeholder preview screen
subquestion: |
  Here is a preview of the form you'll sign on the next page. 
     ${A_affidavit_disclosing_care_or_custody_proceedings0009_attachment_preview}
  % if (need_children_appendix or need_other_parties_appendix or need_past_address_appendix):
  ${care_or_custody_proceedings_appendix_variable }
  % endif
---
attachment:
    variable name: A_affidavit_disclosing_care_or_custody_proceedings0009_attachment_preview
    name: Affidavit of Care
    filename: Affidavit_of_Care
    editable: False    
    pdf template file: 209A_affidavit_disclosing_care_or_custody_proceedings_remarked.pdf
    fields: 
      - "docket_number": ${ docket_numbers[0] }
      - "user_name_full": ${ str(users[0]) }
      - "child1_address_on_one_line": ${ children_of_both.item(0).address.on_one_line(include_unit=True) if not confidential_address else ''}
      - "child2_address_on_one_line": ${ children_of_both.item(1).address.on_one_line(include_unit=True)  if not confidential_address else ''}
      - "child3_address_on_one_line": ${ children_of_both.item(2).address.on_one_line(include_unit=True)  if not confidential_address else ''}
      - "user_address_on_one_line": ${ users[0].address.on_one_line(include_unit=True)  if not confidential_address else ''}
      - "user_name_full__1": ${ str(users[0]) }
      - "child1_address_street": ${ children_of_both.item(0).address.line_one() }
      - "child1_address_city_state_zip": ${ children_of_both.item(0).address.line_two() }
      - "child2_address_street": ${ children_of_both.item(1).address.line_one() }
      - "child2_address_city_state_zip": ${ children_of_both.item(1).address.line_two() }
      - "child3_address_street": ${ children_of_both.item(2).address.line_one() }
      - "child3_address_city_state_zip": ${ children_of_both.item(2).address.line_two() }
      - "user_address_on_one_line__2": ${ users[0].address.on_one_line(include_unit=True) }
      - "case_name": ${ case_name }
      - "court_division_bmc": ${ showifdef('courts[0].division_bmc') }
      - "court_division_district_court": ${ showifdef('courts[0].division_district_court') }
      - "court_division_juvenile_court": ${ showifdef('courts[0].division_juvenile_court') }
      - "court_division_family_court": ${ showifdef('courts[0].division_family_court') }
      - "court_division_superior_court": ${ showifdef('courts[0].division_superior_court') }
      - "child1_name_last_first": ${ children_of_both.item(0).name.lastfirst() }
      - "child2_name_last_first": ${ children_of_both.item(1).name.lastfirst() }
      - "child3_name_last_first": ${ children_of_both.item(2).name.lastfirst() }
      - "confidential_address": ${ confidential_address }
      - "child1_past_addresses_on_one_line": ${ children_of_both.item(0).past_addresses_on_one_line if not confidential_address else '' } 
      - "child2_past_addresses_on_one_line": ${ children_of_both.item(1).past_addresses_on_one_line if not confidential_address else '' }
      - "child3_past_addresses_on_one_line": ${ children_of_both.item(2).past_addresses_on_one_line if not confidential_address else '' }
      - "has_participated_custody_case": ${ has_participated_custody_case }
      - "has_not_participated_custody_case": ${ not has_participated_custody_case }
      - "know_of_other_custody_case": ${ know_of_other_custody_case }
      - "do_not_know_of_other_custody_case": ${ not know_of_other_custody_case }
      - "other_case_1_user_role": ${other_care_custody_proceedings.item(0).user_role }
      - "other_case_1_letters": ${ other_care_custody_proceedings.item(0).child_letters() }
      - "other_case_1_court": ${ other_care_custody_proceedings.item(0).court_name }
      - "other_case_1_docket": ${ other_care_custody_proceedings.item(0).docket_number }
      - "other_case_1_status": ${ other_care_custody_proceedings.item(0).status() }
      - "other_case_2_user_role": ${ other_care_custody_proceedings.item(1).user_role }
      - "other_case_2_letters": ${ other_care_custody_proceedings.item(1).child_letters() }
      - "other_case_2_court": ${ other_care_custody_proceedings.item(1).court_name }
      - "other_case_2_docket": ${ other_care_custody_proceedings.item(1).docket_number }
      - "other_case_2_status": ${ other_care_custody_proceedings.item(1).status() }
      - "other_case_3_user_role": ${ other_care_custody_proceedings.item(2).user_role }
      - "other_case_3_letters": ${ other_care_custody_proceedings.item(2).child_letters()}
      - "other_case_3_court": ${ other_care_custody_proceedings.item(2).court_name }
      - "other_case_3_docket": ${ other_care_custody_proceedings.item(2).docket_number }
      - "other_case_3_status": ${ other_care_custody_proceedings.item(2).status() }
      - "other_case_other_parties_1_letters": ${ filter_letters(others_in_proceedings.item(0).child_letters) }
      - "other_case_other_parties_1_names": ${ others_in_proceedings.item(0) }
      - "other_case_other_parties_1_address_on_one_line": ${ others_in_proceedings.item(0).address.on_one_line(include_unit=True) }
      - "other_case_other_parties_2_letters": ${ filter_letters(others_in_proceedings.item(1).child_letters) }
      - "other_case_other_parties_2_names": ${ others_in_proceedings.item(1) }
      - "other_case_other_parties_2_address_on_one_line": ${ others_in_proceedings.item(1).address.on_one_line(include_unit=True) }
      - "other_case_other_parties_3_names": ${ others_in_proceedings.item(2) }
      - "other_case_other_parties_3_address_on_one_line": ${ others_in_proceedings.item(2).address.on_one_line(include_unit=True) }
      - "other_case_other_parties_3_letters": ${ filter_letters(others_in_proceedings.item(2).child_letters) }
      - "impound_affidavit": ${ impound_affidavit }
      - "day": ${ day }
      - "month": ${ month }
      - "year": ${ year }
      - "attorney_for_juvenile_address_on_one_line": ${ signing_attorney.address.on_one_line(include_unit=True) if needs_attorney_signature else '' }
      - "child1_past_addresses_1": ${ children_of_both.item(0).previous_addresses.item(0).on_one_line() if confidential_address else '' }
      - "child1_past_addresses_2": ${ children_of_both.item(0).previous_addresses.item(1).on_one_line() if confidential_address else '' }
      - "child2_past_addresses_1": ${ children_of_both.item(1).previous_addresses.item(0).on_one_line() if confidential_address else '' }
      - "child2_past_addresses_2": ${ children_of_both.item(1).previous_addresses.item(1).on_one_line() if confidential_address else '' }
      - "child3_past_addresses_1": ${ children_of_both.item(2).previous_addresses.item(0).on_one_line() if confidential_address else '' }
      - "child3_past_addresses_2": ${ children_of_both.item(2).previous_addresses.item(1).on_one_line() if confidential_address else '' }
      - "attorney_for_children_1": ${ str(attorneys_for_children.item(0)) +  ' (' + str(attorneys_for_children.item(0).represented_children) + ')' if defined('attorneys_for_children[0]') else ''}
      - "attorney_for_children_2": ${ str(attorneys_for_children.item(1)) +  ' (' + str(attorneys_for_children.item(1).represented_children) + ')' if defined('attorneys_for_children[1]') else ''}
      - "attorney_for_children_3": ${ str(attorneys_for_children.item(2)) +  ' (' + str(attorneys_for_children.item(2).represented_children) + ')' if defined('attorneys_for_children[2]') else ''}
      - "gals_investigators_1": ${ gals_investigators.item(0).status()}
      - "gals_investigators_2": ${ gals_investigators.item(1).status()}
      - "gals_investigators_3": ${ gals_investigators.item(2).status()}
      - "attorneys_for_parents_1": ${ str(attorneys_for_parents.item(0)) + ' (' + str(attorneys_for_parents.item(0).represented_party) + ')' if defined('attorneys_for_parents[0]') else ''}
      - "attorneys_for_parents_2": ${ str(attorneys_for_parents.item(1)) +  ' (' + str(attorneys_for_parents.item(1).represented_party) + ')' if defined('attorneys_for_parents[1]') else ''}
      - "attorneys_for_parents_3": ${ str(attorneys_for_parents.item(2)) + ' (' + str(attorneys_for_parents.item(2).represented_party) + ')' if defined('attorneys_for_parents[2]') else ''}